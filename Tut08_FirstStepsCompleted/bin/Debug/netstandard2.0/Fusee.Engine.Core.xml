<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fusee.Engine.Core</name>
    </assembly>
    <members>
        <member name="T:Fusee.Engine.Core.Audio">
             <summary>
             The Audio class provides all audio functionality. It is accessible from everywhere.                          
             </summary>
             <remarks>
             Supported file formats are: mp3, ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc,
             ircam, w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64
             
             Audio can be either buffered completely or be played as a stream.
             
             E.g. : IAudioStreamImp myAudio1;
            
                    myAudio1 = Audio.Instance.LoadFile("AssetStorage/Music.ogg"). 
             
                    myAudio1.play();  
             </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Audio.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads an audiofile.
            </summary>
            <param name="fileName">Path to the file.</param>
            <param name="streaming"><c>true</c> if the audiofile shall be streamed; otherwise, <c>false</c>.</param>
            <returns>The audiofile as an <see cref="T:Fusee.Engine.Common.IAudioStreamImp"/></returns>
        </member>
        <member name="M:Fusee.Engine.Core.Audio.Stop">
            <summary>
            Stops all <see cref="T:Fusee.Engine.Common.IAudioStreamImp"/>s.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Audio.SetVolume(System.Single)">
            <summary>
            Sets the main volume (0 to 100)
            </summary>
            <param name="val">The value</param>
        </member>
        <member name="M:Fusee.Engine.Core.Audio.GetVolume">
            <summary>
            Gets the main volume.
            </summary>
            <returns>The main value (0 to 100)</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Audio.SetPanning(System.Single)">
            <summary>
            Sets the panning of all <see cref="T:Fusee.Engine.Common.IAudioStreamImp"/>s (-100 to +100)
            </summary>
            <param name="val">The value</param>
        </member>
        <member name="P:Fusee.Engine.Core.Audio.Instance">
            <summary>
            Provides the Instance of the Audio Class.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.DummyAudioImp">
            <summary>
            Dummy implementation with no functionality
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.OpenDevice">
            <summary>
            Opens the device.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.CloseDevice">
            <summary>
            Closes the device.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="streaming">if set to <c>true</c> [streaming].</param>
            <returns></returns>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.SetVolume(System.Single)">
            <summary>
            Sets the volume.
            </summary>
            <param name="volume">The volume.</param>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.GetVolume">
            <summary>
            Gets the volume.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioImp.SetPanning(System.Single)">
            <summary>
            Sets the panning.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="T:Fusee.Engine.Core.DummyAudioStreamImp">
            <summary>
            Dummy audio stream implementation with no functionality.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.DummyAudioStreamImp.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.DummyAudioStreamImp.Loop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Fusee.Engine.Core.DummyAudioStreamImp"/> is loop.
            </summary>
            <value>
              <c>true</c> if loop; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.DummyAudioStreamImp.Panning">
            <summary>
            Gets or sets the panning.
            </summary>
            <value>
            The panning.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioStreamImp.Play">
            <summary>
            Plays this stream.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioStreamImp.Play(System.Boolean)">
            <summary>
            Plays this stream as a loop.
            </summary>
            <param name="loop">if set to <c>true</c> [loop].</param>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioStreamImp.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyAudioStreamImp.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.AudioStream._asImp">
            <summary>
            For internal purposes. Do not use in application code.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.AudioStream.Volume">
            <summary>
                Gets or sets the volume of this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> (0 - 100).
            </summary>
            <value>
                The volume of this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> (0 - 100).
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.AudioStream.Loop">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> shall be looped.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> shall be looped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.AudioStream.Panning">
            <summary>
                Gets or sets the panning of this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> (-100 to +100).
            </summary>
            <value>
                The panning of this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> (-100 to +100).
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.AudioStream.Play">
            <summary>
                Plays this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" />.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.AudioStream.Play(System.Boolean)">
            <summary>
                Plays this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" />.
            </summary>
            <param name="loop"><c>true</c> if this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" /> shall be looped; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Fusee.Engine.Core.AudioStream.Pause">
            <summary>
                Pauses this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" />.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.AudioStream.Stop">
            <summary>
                Stops this <see cref="T:Fusee.Engine.Common.IAudioStreamImp" />.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.BoxShape">
            <summary>
            A box shaped collision object.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.BoxShape._boxShapeImp">
            <summary>
            The implementation object.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.BoxShape.LocalScaling">
            <summary>
            Retrieves or sets the local scaling.
            </summary>
            <value>
            The local scaling.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.BoxShape.HalfExtents">
            <summary>
            Gets a vector containg half of the values of width, height and depth of the box.
            </summary>
            <value>
            The half extents.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.BoxShape.Margin">
            <summary>
            Retrieves or sets the margin.
            </summary>
            <value>
            The size of the collision shape's margin.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.CapsuleShape">
            <summary>
            A capsule shaped collision object.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.CapsuleShape.Margin">
            <summary>
            Retrieves or sets the margin.
            </summary>
            <value>
            The size of the collision shape's margin.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.CapsuleShape.LocalScaling">
            <summary>
            Retrieves or sets the local scaling.
            </summary>
            <value>
            The local scaling.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.CapsuleShape.HalfHeight">
            <summary>
            Gets the half of this capsule's height.
            </summary>
            <value>
            Half of the height.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.CapsuleShape.Radius">
            <summary>
            Gets this capsules radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.CapsuleShape.UpAxis">
            <summary>
            Gets the up axis of the capsule.
            </summary>
            <value>
            The up axis.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.CollisionShape">
            <summary>
            Base class for various collision shape types.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.CollisionShape._collisionShapeImp">
            <summary>
            The implementation object.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.CollisionShape.Margin">
            <summary>
            Retrieves or sets the margin.
            </summary>
            <value>
            The size of the collision shape's margin.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.CollisionShape.LocalScaling">
            <summary>
            Retrieves or sets the local scaling.
            </summary>
            <value>
            The local scaling.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.CompoundShape">
            <summary>
            A collision shape made up of other shapes of various types.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.BoxShape)">
            <summary>
            Adds a box as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.SphereShape)">
            <summary>
            Adds a sphere as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.CapsuleShape)">
            <summary>
            Adds a capsule as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.ConeShape)">
            <summary>
            Adds a cone as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.CylinderShape)">
            <summary>
            Adds a cylinder as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.MultiSphereShape)">
            <summary>
            Adds a multi-sphere as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.AddChildShape(Fusee.Math.Core.float4x4,Fusee.Engine.Core.EmptyShape)">
            <summary>
            Adds an empty shape as a child shape.
            </summary>
            <param name="localTransform">The local transformation of the child shape.</param>
            <param name="childShape">The child shape.</param>
        </member>
        <member name="M:Fusee.Engine.Core.CompoundShape.CalculatePrincipalAxisTransform(System.Single[],Fusee.Math.Core.float4x4,Fusee.Math.Core.float3)">
            <summary>
            Calculates the principal transformation axis.
            </summary>
            <param name="masses">The masses.</param>
            <param name="principal">The principal axis.</param>
            <param name="inertia">The inertia.</param>
        </member>
        <member name="P:Fusee.Engine.Core.CompoundShape.Margin">
            <summary>
            Retrieves or sets the margin.
            </summary>
            <value>
            The size of the collision shape's margin.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.ConeShape">
            <summary>
             Defines a cone-shaped collision object
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ConeShape.Margin">
            <summary>
            Retrieves or sets the margin.
            </summary>
            <value>
            The size of the collision shape's margin.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeShape.LocalScaling">
            <summary>
            Retrieves or sets the local scaling.
            </summary>
            <value>
            The local scaling.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeShape.ConeUpIndex">
            <summary>
            Gets or sets the index of the cone's up axis
            </summary>
            <value>
            The index of cone's up axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeShape.Height">
            <summary>
            Gets the cone's height along the up axis.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeShape.Radius">
            <summary>
            Gets the cone's radius.
            </summary>
            <value>
            The radius.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.ConeTwistConstraint">
            <summary>
            A cone twist constraint
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.AFrame">
            <summary>
            Gets the reference frame of object a.
            </summary>
            <value>
            a's reference frame.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.BFrame">
            <summary>
            Gets the reference frame of object b.
            </summary>
            <value>
            b's reference frame.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.CalcAngleInfo">
            <summary>
            Calculates the angle information.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.CalcAngleInfo2(Fusee.Math.Core.float4x4,Fusee.Math.Core.float4x4,Fusee.Math.Core.float4x4,Fusee.Math.Core.float4x4)">
            <summary>
            Calculates the angle info 2.
            </summary>
            <param name="transA">The trans a.</param>
            <param name="transB">The trans b.</param>
            <param name="invInertiaWorldA">The inv inertia world a.</param>
            <param name="invInertiaWorldB">The inv inertia world b.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.EnableMotor(System.Boolean)">
            <summary>
            Enables the motor functionality.
            </summary>
            <param name="b">if set to <c>true</c> enables motor behavior.</param>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.FixThresh">
            <summary>
            Gets or sets the fix threshold.
            </summary>
            <value>
            The fix thresh.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.FrameOffsetA">
            <summary>
            Gets the frame offset of object a.
            </summary>
            <value>
            The frame offset of a.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.FrameOffsetB">
            <summary>
            Gets the frame offset of object b.
            </summary>
            <value>
            The frame offset of b.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.GetPointForAngle(System.Single,System.Single)">
            <summary>
            Gets the point for angle.
            </summary>
            <param name="fAngleInRadius">The f angle in radius.</param>
            <param name="fLength">Length of the f.</param>
            <returns></returns>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.IsPastSwingLimit">
            <summary>
            Gets a value indicating whether this instance is past swing limit.
            </summary>
            <value>
            <c>true</c> if this instance is past swing limit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetAngularOnly(System.Boolean)">
            <summary>
            Sets the angular only.
            </summary>
            <param name="angularOnly">if set to <c>true</c> [angular only].</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetDamping(System.Single)">
            <summary>
            Sets the damping.
            </summary>
            <param name="damping">The damping.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetLimit(System.Int32,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="limitIndex">Index of the limit.</param>
            <param name="limitValue">The limit value.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the limit.
            </summary>
            <param name="swingSpan1">The swing span1.</param>
            <param name="swingSpan2">The swing span2.</param>
            <param name="twistSpan">The twist span.</param>
            <param name="softness">The softness.</param>
            <param name="biasFactor">The bias factor.</param>
            <param name="relaxationFactor">The relaxation factor.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetMaxMotorImpulse(System.Single)">
            <summary>
            Sets the maximum motor impulse.
            </summary>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetMaxMotorImpulseNormalized(System.Single)">
            <summary>
            Sets the normalized maximum motor impulse.
            </summary>
            <param name="maxMotorImpulse">The maximum motor impulse.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetMotorTarget(Fusee.Math.Core.Quaternion)">
            <summary>
            Sets the motor target.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.SetMotorTargetInConstraintSpace(Fusee.Math.Core.Quaternion)">
            <summary>
            Sets the motor target in constraint space.
            </summary>
            <param name="q">The q.</param>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.SolveSwingLimit">
            <summary>
            Gets the solve swing limit.
            </summary>
            <value>
            The solve swing limit.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.SolveTwistLimit">
            <summary>
            Gets the solve twist limit.
            </summary>
            <value>
            The solve twist limit.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.SwingSpan1">
            <summary>
            Gets the swing span1.
            </summary>
            <value>
            The swing span1.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.SwingSpan2">
            <summary>
            Gets the swing span2.
            </summary>
            <value>
            The swing span2.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.TwistAngle">
            <summary>
            Gets the twist angle.
            </summary>
            <value>
            The twist angle.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.TwistLimitSign">
            <summary>
            Gets the twist limit sign.
            </summary>
            <value>
            The twist limit sign.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.TwistSpan">
            <summary>
            Gets the twist span.
            </summary>
            <value>
            The twist span.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.UpdateRhs(System.Single)">
            <summary>
            Updates the RHS.
            </summary>
            <param name="timeStep">The time step.</param>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.RigidBodyA">
            <summary>
            Gets the rigid body a.
            </summary>
            <value>
            The rigid body a.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.ConeTwistConstraint.RigidBodyB">
            <summary>
            Gets the rigid body b.
            </summary>
            <value>
            The rigid body b.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.ConeTwistConstraint.GetUid">
            <summary>
            Gets the uid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusee.Engine.Core.ConvexHullShape">
            <summary>
            This is the fastest kind of arbitrary shape. 
            It is defined by a cloud of vertices but the shape formed is the smallest convex shape that encloses the vertices. 
            For making a convex dynamic shape like a TV, this is ideal. 
            Make sure to reduce the number of vertices below say 100.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ConvexHullShape.AddPoint(Fusee.Math.Core.float3)">
            <summary>
            Add a vertex to the cloud of vertices.
            There can't be added any vertices to the Shape once it has been added to a rigidbody
            </summary>
            <param name="point">The vertex to add.</param>
        </member>
        <member name="T:Fusee.Engine.Core.ConvertSceneGraph">
            <summary>
            Use ConVSceneToHighLevel to create new high level graph from a low level graph (made out of scene nodes and components) in order
            to have each visited element converted and/or split into its high level, render-ready components.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ConvertSceneGraph.Convert(Fusee.Serialization.SceneContainer)">
            <summary>
            Traverses the given SceneContainer and creates new high level graph by converting and/or spliting its components into the high level equivalents.
            </summary>
            <param name="sc">The SceneContainer to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Fusee.Engine.Core.Cube">
            <summary>
            Creates a simple cube geomentry straight from the code.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Cube.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.Cube" /> class.
            The default cube is 1 unit big.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.GlyphOnMap">
            <summary>
            Used in conjunction with a <see cref="T:Fusee.Engine.Core.FontMap"/> containting information about
            a rendered character (glyph) on a font map texture.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.GlyphOnMap.BitmapW">
            <summary>
                The width of this char on the font map texture.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.GlyphOnMap.BitmapH">
            <summary>
                The height of this char on the font map texture.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.GlyphOnMap.BitmapL">
            <summary>
                The left border of this char on the font map texture.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.GlyphOnMap.BitmapT">
            <summary>
                The top border of this char on the font map texture.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.GlyphOnMap.TexOffX">
            <summary>
                The x-offset of this char on the font map texture.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.GlyphOnMap.TexOffY">
            <summary>
                The y-offset of this char on the font map texture.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.FontMap">
            <summary>
            A FontMap creates an <see cref="P:Fusee.Engine.Core.FontMap.Image"/> containing a subset of rendered glyphs of a given Font.
            In addition a FontMap provides information about each glyph on the image such as its pixel position
            on the image. Such an image can be used together with the provided information to create geometry
            consisting of individual quads with each quad displaying a single character of a text string.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.FontMap.#ctor(Fusee.Base.Core.Font,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.FontMap"/> class.
            </summary>
            <param name="font">The font to be used. See <see cref="P:Fusee.Engine.Core.FontMap.Font"/>.</param>
            <param name="pixelHeight">Height in pixesl of a character. See <see cref="P:Fusee.Engine.Core.FontMap.PixelHeight"/>.</param>
            <param name="alphabet">The alphabet. See <see cref="P:Fusee.Engine.Core.FontMap.Alphabet"/>.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Fusee.Engine.Core.FontMap.Image">
            <summary>
            Gets the image containing all characters specified in the <see cref="P:Fusee.Engine.Core.FontMap.Alphabet"/>. Use this image
            as a texture used by individual rectangles each displaying a single character. Use the information
            retrieved from <see cref="M:Fusee.Engine.Core.FontMap.GetGlyphOnMap(System.UInt32)"/> to position the character rectangles and to align 
            their texure coordinates.
            </summary>
            <value>
            The font image.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.FontMap.FixTextKerning(Fusee.Math.Core.float3[],System.String,System.Single)">
            <summary>
            Fixes the kerning of a text (if possible). Todo: Instead of fixing existing geometry provide methods to create kerned geometry.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="text">The text.</param>
            <param name="scaleX">The scale x (OpenGL scaling factor).</param>
            <returns>The fixed vertices as an array of <see cref="T:Fusee.Math.Core.float3"/>.</returns>
        </member>
        <member name="P:Fusee.Engine.Core.FontMap.Font">
            <summary>
            Gets or sets the font displayed on this font map.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.FontMap.PixelHeight">
            <summary>
            Gets or sets the pixel height of each character on this font. This setting will affect the 
            size of the font <see cref="P:Fusee.Engine.Core.FontMap.Image"/> , so be careful with this setting.
            </summary>
            <value>
            The height in pixels of an individual character.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.FontMap.Alphabet">
            <summary>
            Gets or sets the list of characters that should be present on the font <see cref="P:Fusee.Engine.Core.FontMap.Image"/>.
            </summary>
            <value>
            The alphabet.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.FontMap.Uptodate">
            <summary>
            Gets a value indicating whether this <see cref="T:Fusee.Engine.Core.FontMap"/> is uptodate.
            </summary>
            <value>
              <c>true</c> if uptodate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.FontMap.GetGlyphOnMap(System.UInt32)">
            <summary>
            Gets the glyph on map information for the given character/glyph. This information can be used to create geometry textured with on single 
            character from the font <see cref="P:Fusee.Engine.Core.FontMap.Image"/>.
            </summary>
            <param name="c">The character to obtain information for.</param>
            <returns>The <see cref="T:Fusee.Engine.Core.GlyphOnMap"/> record for the given character containting information where on the texture the glyph resides.</returns>
        </member>
        <member name="T:Fusee.Engine.Core.Icosahedron">
            <summary>
            Creates a Icosahedron geomentry straight from the code.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Icosahedron.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.Icosahedron" /> class.
            All Vertices of the Icosahedron are lying on the unit sphere.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.Icosphere">
            <summary>
            Creates a Icosphere geomentry straight from the code.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Icosphere.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.Icosphere" /> class.
            All Vertices of the Icosphere are lying on the unit sphere.
            </summary>
            <param name="subdivLevel">Defines the number subdivisions and therefor the number of triangles and the smoothness of the sphere.</param>
        </member>
        <member name="T:Fusee.Engine.Core.NormalAndUvHelper">
            <summary>
            Contains static methods to calculate the normals for a mesh.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.NormalAndUvHelper.CreateVertexNormals(Fusee.Serialization.Mesh)">
            <summary>
            Calculates the vertex normals for a given mesh by calculating the avarage of all normals of faces, adjacent to a vertex.
            </summary>
            <param name="mesh">The mesh for which to calculate the normals.</param>
        </member>
        <member name="M:Fusee.Engine.Core.MeshManager.#ctor(Fusee.Engine.Common.IRenderContextImp)">
            <summary>
            Creates a new Instance of MeshManager. Th instance is handling the memory allocation and deallocation on the GPU by observing Mesh.cs objects.
            </summary>
            <param name="renderContextImp">The RenderContextImp is used for GPU memory allocation and deallocation. See RegisterMesh.</param>
        </member>
        <member name="M:Fusee.Engine.Core.MeshManager.Cleanup">
            <summary>
            Call this method on the mainthread after RenderContext.Render in order to cleanup all not used Buffers from GPU memory.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.NamespaceDoc">
            <summary>
            <para>
            Classes in this module implement FUSEE's 3D rendering capability. 
            Many classes contain methods that
            enable user code to render 3D content, create 3D output windows, create and maniulate scene contents,
            organize scene contents in scene graphs, etc. 
            </para>
            <para>
            Among the most important classses are
            <list type="bullet">
              <item>
                <term><see cref="T:Fusee.Engine.Core.RenderCanvas"/></term>
                <description>The base class for FUSEE Apps. Creates and manages the rendering window and provides
                a render context to draw onto.</description>
              </item>
              <item>
                <term><see cref="T:Fusee.Engine.Core.RenderContext"/></term>
                <description>Abstracts 3D Drawing functionality from the underlying hardware-API (e.g. OpenGL).</description>
              </item>
              <item>
                <term><see cref="T:Fusee.Engine.Core.SceneRenderer"/></term>
                <description>Visits a scene graph's items and renders each item's contribution to a render context.</description>
              </item>
            </list>
            </para>
            <para>
            Some of the functionality relies on platform specific implementations found in underlying platform-dependent modules.
            Common classes used by both, this module and underlying platform-dependent implementation modules can be found int the
            <see cref="N:Fusee.Engine.Common"/> namespace.
            </para>
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.NineSlicePlane">
            <summary>
            Creates a plane geometry straight from the code that is devided in 9 tiles.
            This geometry is intended for displaying GUI Textures.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.NineSlicePlane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.NineSlicePlane" /> class.
            The default NineSlicePlane is 1 unit big.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.Plane">
            <summary>
            Creates a simple plane geomentry straight from the code.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Plane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.Plane" /> class.
            The default plane is 1 unit big.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.GLSL.CreateMethod(Fusee.Engine.Core.Type,System.String,System.String[],System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a GLSL method
            </summary>
            <param name="returnType"></param>
            <param name="methodName"></param>
            <param name="methodParams"></param>
            <param name="method">method body goes here</param>
            <returns></returns>
        </member>
        <member name="T:Fusee.Engine.Core.ShaderCodeBuilder">
            <summary>
            Compiler for ShaderCode. Takes a MaterialComponent, evaluates input parameters and creates pixel and vertexshader
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.VS">
            <summary>
            The complete VertexShader
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.PS">
            <summary>
            The complete Pixelshader
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderCodeBuilder.#ctor(Fusee.Serialization.MaterialComponent,Fusee.Serialization.Mesh,Fusee.Serialization.WeightComponent,System.Boolean)">
            <summary>
            LEGACY CONSTRUCTOR
            Creates vertex and pixel shader for given material, mesh, weight; light calculation is simple per default
            </summary>
            <param name="mc">The MaterialCpmponent</param>
            <param name="mesh">The Mesh</param>
            <param name="wc">Teh WeightComponent</param>
            <param name="renderWithShadows">Should the resulting shader include shadowcalculation</param>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderCodeBuilder.#ctor(Fusee.Serialization.MaterialComponent,Fusee.Serialization.Mesh,Fusee.Engine.Core.LightingCalculationMethod,Fusee.Serialization.WeightComponent,System.Boolean)">
            <summary>
            Creates vertex and pixel shader for given material, mesh, weight; light calculation is simple per default
            </summary>
            <param name="mc">The MaterialCpmponent</param>
            <param name="mesh">The Mesh</param>
            <param name="wc">The WeightComponent</param>
            <param name="lightingCalculation">Method of light calculation; simple BLINN PHONG or advanced physically based</param>
            <param name="renderWithShadows">Should the resulting shader include shadowcalculation</param>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderCodeBuilder.AddPbrSpecularLightMethod(Fusee.Serialization.MaterialPBRComponent)">
            <summary>
            Replaces Specular Calculation with Cook-Torrance-Shader
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderCodeBuilder.MakeShaderEffectFromMatComp(Fusee.Serialization.MaterialComponent,Fusee.Serialization.WeightComponent)">
            <summary> 
            Creates a ShaderEffectComponent from a MaterialComponent 
            </summary> 
            <param name="mc">The MaterialComponent</param> 
            <param name="wc">Only pass over a WeightComponent if you use bone animations in the current node (usage: pass currentNode.GetWeights())</param> 
            <returns></returns> 
            <exception cref="T:System.Exception"></exception> 
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.DiffuseColorName">
            <summary>
            The var name for the uniform DiffuseColor variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.SpecularColorName">
            <summary>
            The var name for the uniform SpecularColor variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.EmissiveColorName">
            <summary>
            The var name for the uniform EmissiveColor variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.DiffuseTextureName">
            <summary>
            The var name for the uniform DiffuseTexture variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.SpecularTextureName">
            <summary>
            The var name for the uniform SpecularTexture variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.EmissiveTextureName">
            <summary>
            The var name for the uniform EmissiveTexture variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.BumpTextureName">
            <summary>
            The var name for the uniform BumpTexture variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.DiffuseMixName">
            <summary>
            The var name for the uniform DiffuseMix variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.SpecularMixName">
            <summary>
            The var name for the uniform SpecularMix variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.EmissiveMixName">
            <summary>
            The var name for the uniform EmissiveMix variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.SpecularShininessName">
            <summary>
            The var name for the uniform SpecularShininess variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.SpecularIntensityName">
            <summary>
            The var name for the uniform SpecularIntensity variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.BumpIntensityName">
            <summary>
            The var name for the uniform BumpIntensity variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.LightDirectionName">
            <summary>
            The var name for the uniform LightDirection variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.LightColorName">
            <summary>
            The var name for the uniform LightColor variable within the pixelshaders
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderCodeBuilder.LightIntensityName">
            <summary>
            The var name for the uniform LightIntensity variable within the pixelshaders
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.Face">
            <summary>
            A container that stores indices for vertices, normals and texture coordinates.
            The values are used for conversion to different geometry face formats, e.g. Triangles.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.Face.InxVert">
            <summary>
            The inx vert
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.Face.InxNormal">
            <summary>
            The inx normal
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.Face.InxTexCoord">
            <summary>
            The inx tex coord
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.Geometry">
            <summary>
            Stores threedimensional, polygonal geometry and provides methods for manipulation.
            To actually render the geometry in the engine, convert Geometry to <see cref="T:Fusee.Serialization.Mesh"/> objects.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Geometry.Vertices">
            <summary>
            The list of vertices (3D positions).
            </summary>
            <value>
            The vertices.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Geometry.Normals">
            <summary>
            Gets or sets the normals.
            </summary>
            <value>
            The normals.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Geometry.TexCoords">
            <summary>
            Gets or sets the texture coordinates.
            </summary>
            <value>
            The texture coordinates.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Geometry.Faces">
            <summary>
            Gets or sets the faces.
            </summary>
            <value>
            The faces.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.Geometry"/> class.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.AddVertex(Fusee.Math.Core.double3)">
            <summary>
            Adds a vertex.
            </summary>
            <param name="v">A 3D vector.</param>
            <returns>The current vertex count.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.AddTexCoord(Fusee.Math.Core.double2)">
            <summary>
            Adds the texture coordinates.
            </summary>
            <param name="uv">Texture coordinate</param>
            <returns>The count of <see cref="P:Fusee.Engine.Core.Geometry.TexCoords"/>.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.AddNormal(Fusee.Math.Core.double3)">
            <summary>
            Adds the normal.
            </summary>
            <param name="normal">The normal.</param>
            <returns>The count of <see cref="P:Fusee.Engine.Core.Geometry.Normals"/>.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.AddFace(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Adds the face.
            </summary>
            <param name="vertInx">The vert inx.</param>
            <param name="texCoordInx">The tex coord inx.</param>
            <param name="normalInx">The normal inx.</param>
            <returns>The face count as integer value.</returns>
            <exception cref="T:System.ArgumentNullException">vertInx</exception>
            <exception cref="T:System.ArgumentException">
            "Vertex index out of range: vertInx[i]"
            or
            "Number of texture coordinate indices must match number of vertex indices"
            or
            "Texture coordinate index out of range: texCoordInx[i]"
            or
            "Number of normal indices must match number of vertex indices"
            or
            "Normal index out of range: normalInx[i]"
            </exception>
        </member>
        <member name="P:Fusee.Engine.Core.Geometry.HasNormals">
            <summary>
            Gets a value indicating whether this instance has normals.
            </summary>
            <value>
            <c>true</c> if this instance has normals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Geometry.HasTexCoords">
            <summary>
            Gets a value indicating whether this instance has tex coords.
            </summary>
            <value>
            <c>true</c> if this instance has texture coordinates; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.GetAllFacesContainingVertex(System.Int32,System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            Gets all faces containing a certain vertex.
            </summary>
            <param name="iV">The index of the vertex.</param>
            <param name="vertInFace">Out parameter: A list of indices of the vertex in each respecitve face.</param>
            <returns>A list of indices containing the vertex.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.CalcFaceNormal(Fusee.Engine.Core.Face)">
            <summary>
            Calculates the normal vector for a given face.
            </summary>
            <param name="f">The face to calculate the normal for.</param>
            <returns>The nomal vector for the face.</returns>
            <exception cref="T:System.Exception">The face doesn't consist of 3 or more vertices.</exception>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.CreateNormals(System.Double)">
            <summary>
            Creates normals for the entire geometry based on a given smoothing angle.
            </summary>
            <param name="smoothingAngle">The smoothing angle.</param>
        </member>
        <member name="F:Fusee.Engine.Core.Geometry.TripleInx.iV">
            <summary>
            The i V
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.Geometry.TripleInx.iT">
            <summary>
            The i V
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.Geometry.TripleInx.iN">
            <summary>
            The i V
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.TripleInx.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Fusee.Engine.Core.Geometry.ToMesh">
            <summary>
            Converts the whole geomentry to a <see cref="T:Fusee.Serialization.Mesh"/>.
            </summary>
            <returns>An equivalent instance of <see cref="T:Fusee.Serialization.Mesh"/>.</returns>
        </member>
        <member name="T:Fusee.Engine.Core.DeviceConnectionArgs">
            <summary>
            Parameters sent with a <see cref="!:InputDriver.DeviceConnected"/> or <see cref="!:InputDriver.DeviceDisconnected"/>  event.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.DeviceConnectionArgs.InputDevice">
            <summary>
            The input device (such as a game pad) that was just connected or disconnected.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.Input">
            <summary>
            Handles and manages all input devices. Input is a staticton (a singleton with an additional
            static interface). 
            </summary>
            <remarks>
            Use the input instanmce in cases where you actually need an 
            object to pass around (although there is no such use case in FUSEE code at all).
            Use the static access in all other cases to reduce typing Input.Instance
            over and over again. Use <code>using static Fusee.Engine.Core.Input</code> to
            directly access <see cref="P:Fusee.Engine.Core.Input.Keyboard"/>, <see cref="P:Fusee.Engine.Core.Input.Mouse"/> and <see cref="P:Fusee.Engine.Core.Input.Touch"/>
            without even typing a namespace or classname.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.InputDrivers">
            <summary>
            Retrieves the the input driver implementations currently registered.
            </summary>
            <value>
            The input driver implmementations.
            </value>
            <remarks>
            This is an instance method. Use <see cref="P:Fusee.Engine.Core.Input.Drivers"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.Drivers">
            <summary>
            Retrieves the the input driver implementations currently registered.
            </summary>
            <value>
            The input driver implmementations.
            </value>
            <remarks>
            This is a static method. Use <see cref="P:Fusee.Engine.Core.Input.InputDrivers"/> for an insatnce method 
            to the same functionality.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Input.GetInputDevices``1">
            <summary>
            Gets the input devices of a certain type. Shortcut for
            <code>InputDevices.OfType&lt;TDevice&gt;()</code>
            </summary>
            <typeparam name="TDevice">The type of the devices to find.</typeparam>
            <returns>The input devices of the specified type</returns>
            <remarks>
            This is an instance method. Use <see cref="M:Fusee.Engine.Core.Input.GetDevices``1"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Input.GetDevices``1">
            <summary>
            Gets the input devices of a certain type. Shortcut for
            <code>InputDevices.OfType&lt;TDevice&gt;()</code>
            </summary>
            <typeparam name="TDevice">The type of the devices to find.</typeparam>
            <returns>The input devices of the specified type</returns>
            <remarks>
            This is a static method. Use <see cref="M:Fusee.Engine.Core.Input.GetInputDevices``1"/> for an insatnce method 
            to the same functionality.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Input.GetInputDevice``1">
            <summary>
            Gets the first input device of a certain type. Shortcut for
            <code>InputDevices.OfType&lt;TDevice&gt;().FirstOrDefault()</code>
            </summary>
            <typeparam name="TDevice">The type of the device to find.</typeparam>
            <returns>The first device matching the given type, or null if no such device is currently present.</returns>
            <remarks>
            This is an instance method. Use <see cref="M:Fusee.Engine.Core.Input.GetDevice``1"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Input.GetDevice``1">
            <summary>
            Gets the first input device of a certain type. Shortcut for
            <code>InputDevices.OfType&lt;TDevice&gt;().FirstOrDefault()</code>
            </summary>
            <typeparam name="TDevice">The type of the device to find.</typeparam>
            <returns>The first device matching the given type, or null if no such device is currently present.</returns>
            <remarks>
            This is a static method. Use <see cref="M:Fusee.Engine.Core.Input.GetInputDevice``1"/> for an insatnce method 
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.MouseInput">
            <summary>
            Retrieves the first mouse device (if present).
            </summary>
            <value>
            The mouse (or null).
            </value>
            <remarks>
            This is an instance property. Use <see cref="P:Fusee.Engine.Core.Input.Mouse"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.Mouse">
            <summary>
            Retrieves the first mouse device (if present).
            </summary>
            <value>
            The mouse (or null).
            </value>
            <remarks>
            This is a static property. Use <see cref="!:MouseInput&gt;"/> for an insatnce property 
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.KeyboardInput">
            <summary>
            Retrieves the first keyboard device (if present).
            </summary>
            <value>
            The keyboard (or null).
            </value>
            <remarks>
            This is an instance property. Use <see cref="P:Fusee.Engine.Core.Input.Keyboard"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.Keyboard">
            <summary>
            Retrieves the first keyboard device (if present).
            </summary>
            <value>
            The keyboard (or null).
            </value>
            <remarks>
            This is a static property. Use <see cref="!:KeyboardInput&gt;"/> for an insatnce property 
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.TouchInput">
            <summary>
            Retrieves the first touch device (if present).
            </summary>
            <value>
            The touch device (or null).
            </value>
            <remarks>
            This is an instance property. Use <see cref="P:Fusee.Engine.Core.Input.Touch"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.Touch">
            <summary>
            Retrieves the first touch device (if present).
            </summary>
            <value>
            The touch device (or null).
            </value>
            <remarks>
            This is a static property. Use <see cref="!:TouchInput&gt;"/> for an insatnce property 
            to the same functionality.
            </remarks>
        </member>
        <member name="E:Fusee.Engine.Core.Input.InputDeviceConnected">
            <summary>
            Occurs when a device such as a gamepad is connected.
            </summary>
            <remarks>
            This is an instance event. Use <see cref="E:Fusee.Engine.Core.Input.DeviceConnected"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="E:Fusee.Engine.Core.Input.DeviceConnected">
            <summary>
            Occurs when a device such as a gamepad is connected.
            </summary>
            <remarks>
            This is a static event. Use <see cref="!:DeviceConnected&gt;"/> for an insatnce property 
            to the same functionality.
            </remarks>
        </member>
        <member name="E:Fusee.Engine.Core.Input.InputDeviceDisconnected">
            <summary>
            Occurs when a device such as a gamepad is disconnected.
            </summary>
            <remarks>
            This is an instance event. Use <see cref="E:Fusee.Engine.Core.Input.DeviceConnected"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="E:Fusee.Engine.Core.Input.DeviceDisconnected">
            <summary>
            Occurs when a device such as a gamepad is disconnected.
            </summary>
            <remarks>
            This is a static event. Use <see cref="!:DeviceConnected&gt;"/> for an insatnce property 
            to the same functionality.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Input.Instance">
            <summary>
                Provides the singleton Instance of the Input Class.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Input.AddInputDriverImp(Fusee.Engine.Common.IInputDriverImp)">
            <summary>
            Adds an input driver implementation to the internal list. The input driver is queried about connected
            devices. All new devices will then show up in the <see cref="P:Fusee.Engine.Core.Input.Devices"/> (or <see cref="P:Fusee.Engine.Core.Input.InputDevices"/>).
            list (in addition to the already listed devices.
            </summary>
            <param name="inputDriver">The new input driver to add.</param>
            <remarks>
            This is an instance method. Use <see cref="M:Fusee.Engine.Core.Input.AddDriverImp(Fusee.Engine.Common.IInputDriverImp)"/> for a static-over-singleton access
            to the same functionality.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Input.AddDriverImp(Fusee.Engine.Common.IInputDriverImp)">
            <summary>
            Adds an input driver implementation to the internal list. The input driver is queried about connected
            devices. All new devices will then show up in the <see cref="P:Fusee.Engine.Core.Input.Devices"/> (or <see cref="P:Fusee.Engine.Core.Input.InputDevices"/>).
            list (in addition to the already listed devices.
            </summary>
            <param name="inputDriver">The new input driver to add.</param>
            <remarks>
            This is a static method. Use <see cref="!:AddInputDriverImp&gt;"/> for an insatnce property 
            to the same functionality.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Input.PreRender">
            <summary>
            Should be called from the main (rendering-) loop. Typically not to be called by user code unless
            users implement their own rendering/application loop.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Input.PostRender">
            <summary>
            Should be called from the main (rendering-) loop. Typically not to be called by user code unless
            users implement their own rendering/application loop.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Input.Dispose">
            <summary>
            Should be called from the application framework before the application stops. Typically not to be called by user code unless
            users implement their own application framework.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.InputDevice">
            <summary>
            Input device instances expose access to underlying physical input devices such as mouse, keyboard, game pads etc.
            Users can either poll axis values or button state from an Input device or add event listeners reacting
            on value or state changes, no matter how the underlying physical device provides axis or button data.
            Additionally users can define their own axes by specifying calculation rules how to generate values from 
            existing axes or buttons.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.NewAxisID">
            <summary>
            Gets the new next possible new axis identifier. Use this when calling <see cref="M:Fusee.Engine.Core.InputDevice.RegisterCalculatedAxis(Fusee.Engine.Common.AxisDescription,Fusee.Engine.Core.InputDevice.AxisValueCalculator,System.Single)"/>.
            </summary>
            <value>
            The new axis identifier.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.IsConnected">
            <summary>
            Gets or sets a value indicating whether this device is connected.
            </summary>
            <value>
              <c>true</c> if this device is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.Id">
            <summary>
            Gets an identifier. Implementors take care that this
            id is unique across all devices managed by a driver.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.Desc">
            <summary>
            Gets the human readable description of this device. This
            parameter can be used in user dialogs to identify devices.
            </summary>
            <value>
            The deivce description.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.Category">
            <summary>
            Gets the category of this device. Device categories define a minimal common
            set of buttons and axes which are identical across all devices sharing the same
            category.
            </summary>
            <value>
            The device category.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.AxesCount">
            <summary>
            Gets number of axes supported by this device.
            </summary>
            <value>
            The axes count.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.AxisDesc">
            <summary>
            Gets a description of the axis. This value can be used in user setup-dialogs or 
            to match axes of devices of different categories.
            </summary>
            <value>
            The description of the axis.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.GetAxisDescription(System.Int32)">
            <summary>
            Retrieves a description for the given axis
            </summary>
            <param name="axisId">The axis identifier.</param>
            <returns>A description of the axis.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.GetAxis(System.Int32)">
            <summary>
                Gets the value currently present at the given axis.
            </summary>
            <param name="axisId">The axis' Id as specified in <see cref="P:Fusee.Engine.Core.InputDevice.AxisDesc"/>.</param>
            <returns>The value currently set on the axis.</returns>
            <remarks>
                See <see cref="T:Fusee.Engine.Common.AxisDescription"/> to get information about how to interpret the
                values returned by a given axis.
             </remarks>
        </member>
        <member name="E:Fusee.Engine.Core.InputDevice.AxisValueChanged">
            <summary>
            Occurs when the value of a given axis has changed.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.ButtonCount">
            <summary>
            Gets the number of buttons supported by this device.
            </summary>
            <value>
            The button count.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.InputDevice.ButtonDesc">
            <summary>
            Gets the name of the button. This value can be used in user setup-dialogs or 
            to match buttons of devices of different categories.
            </summary>
            <value>
            The name of the button.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.GetButtonDescription(System.Int32)">
            <summary>
            Retrieves a description for the given button.
            </summary>
            <param name="buttonId">The axis identifier.</param>
            <returns>A description of the axis.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.GetButton(System.Int32)">
            <summary>
            Gets the current state of the given button.
            </summary>
            <param name="buttonId">The buttonId of the button as specified in <see cref="P:Fusee.Engine.Core.InputDevice.ButtonDesc"/>.</param>
            <returns>true if the button is currently pressed. false, if the button is currently released.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.IsButtonDown(System.Int32)">
            <summary>
            Determines whether the button was pressed down right before or during the current frame.
            This value is true only for one frame even if the button is pressed longer than one frame.
            </summary>
            <param name="buttonId">The button identifier.</param>
            <returns>
            true if the button was pressed during this frame and is still pressed down. false, if the button is released 
            or if it was pressed some frames ago.
            </returns>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.IsButtonUp(System.Int32)">
            <summary>
            Determines whether the button was released right before or during the current frame.
            This value is true only for one frame even if the button is released longer than one frame.
            </summary>
            <param name="buttonId">The button identifier.</param>
            <returns>
            true if the button was released during this frame and is still released. false, if the button is pressed 
            or if it was released some frames ago.
            </returns>
        </member>
        <member name="E:Fusee.Engine.Core.InputDevice.ButtonValueChanged">
            <summary>
            Occurs when the value of a given button has changed.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.RegisterCalculatedAxis(Fusee.Engine.Common.AxisDescription,Fusee.Engine.Core.InputDevice.AxisValueCalculator,System.Single)">
            <summary>
            Registers a calculated axis. Calculated axes behave like axes exposed by the underlying
            hardware device but can be calculated from one or more existing axes or buttons.
            </summary>
            <param name="calculatedAxisDescription">The axis description for the new calculated axis.</param>
            <param name="calculator">The calculator method performing the calculation once per frame.</param>
            <param name="initialValue">The initial value for the new axis.</param>
            <remarks>
            To register your own axis you need to provide a working <see cref="T:Fusee.Engine.Core.InputDevice.AxisValueCalculator"/>. This method
            is called whenever the axis value needs to be present.
            Any state the calculation depends upon should be queried from existing axes presented by the input device 
            or "statically" stored in the closure around the calculator. The methodes
            <list type="bullet"></list>
            <item><see cref="M:Fusee.Engine.Core.InputDevice.RegisterSingleButtonAxis(System.Int32,Fusee.Engine.Common.AxisDirection,System.Single,System.Single,System.Int32,System.String)"/></item>
            <item><see cref="M:Fusee.Engine.Core.InputDevice.RegisterTwoButtonAxis(System.Int32,System.Int32,Fusee.Engine.Common.AxisDirection,System.Single,System.Single,System.Int32,System.String)"/></item>
            <item><see cref="M:Fusee.Engine.Core.InputDevice.RegisterVelocityAxis(System.Int32,System.Int32,System.Int32,System.String,Fusee.Engine.Common.AxisDirection)"/></item>
            </remarks>
            provide pre-defined calculators for certain purposes.
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.RegisterVelocityAxis(System.Int32,System.Int32,System.Int32,System.String,Fusee.Engine.Common.AxisDirection)">
            <summary>
            Registers a calculated axis exhibiting the derivative after the time (Velocity) of the value on the specified original axis.
            </summary>
            <param name="origAxisId">The original axis identifier.</param>
            <param name="triggerButtonId">If a valid id is passed, the derived axis only produces values if the specified button is pressed. The velocity is only
            calculated based on the axis value when the trigger button is pressed. This allows touch velocities to always start with a speed of zero when the touch starts (e.g. the 
            button identifying that a touchpoint has contact). Otherwise touch velocites would become huge between two click-like touches on different screen locations. 
            If this parameter is 0 (zero), the derived axis will always be calculated based on the original axis only.</param>
            <param name="velocityAxisId">The derived axis identifier. Note this value must be bigger than all existing axis Ids. Leave this value
            zero to have a new identifier calculated automatically.</param>
            <param name="name">The name of the new axis.</param>
            <param name="direction">The direction of the new axis.</param>
            <returns>
            The axis description of the newly created calculated axis.
            </returns>
            <remarks>
            A derived axis is helpful if you have a device delivering absolute positional values but you need the current
            speed of the axis. Imagine a mouse where the speed of the mouse over the screen is important rather than the absolute
            position.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.RegisterSingleButtonAxis(System.Int32,Fusee.Engine.Common.AxisDirection,System.Single,System.Single,System.Int32,System.String)">
            <summary>
            Registers a calculated axis from a button. The axis' value changes between 0 and 1 as the user hits the button or releases it.
            The time it takes to change the value can be set.
            </summary>
            <param name="origButtonId">The original button identifier.</param>
            <param name="direction">The direction the new axis is heading towards.</param>
            <param name="rampUpTime">The time it takes to change the value from 0 to 1 (in seconds).</param>
            <param name="rampDownTime">The time it takes to change the value from 1 to 0 (in seconds).</param>
            <param name="buttonAxisId">The new identifier of the button axis. Note this value must be bigger than all existing axis Ids. Leave this value
            zero to have a new identifier calculated automatically.</param>
            <param name="name">The name of the new axis.</param>
            <returns>The axis description of the newly created calculated axis.</returns>
            <remarks>
              Button axes are useful to simulate a trigger or thrust panel with the help of individual buttons. There is a user-defineable acceleration and 
              deceleration period, so a simulation resulting on this input delivers a feeling of inertance.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.InputDevice.RegisterTwoButtonAxis(System.Int32,System.Int32,Fusee.Engine.Common.AxisDirection,System.Single,System.Single,System.Int32,System.String)">
            <summary>
            Registers a calculated axis from two buttons. The axis' value changes between -1 and 1 as the user hits the button or releases it.
            The time it takes to change the value can be set.
            </summary>
            <param name="origButtonIdNegative">The original button identifier for negative movements.</param>
            <param name="origButtonIdPositive">The original button identifier for positive movements.</param>
            <param name="direction">The direction the new axis is heading towards.</param>
            <param name="rampUpTime">The time it takes to change the value from 0 to 1 (or -1) (in seconds) when one of the buttons is pushed.</param>
            <param name="rampDownTime">The time it takes to change the value from -1 of 1 back to 0 (in seconds) when a pushed button is released.</param>
            <param name="buttonAxisId">The new identifier of the button axis. Note this value must be bigger than all existing axis Ids. Leave this value
            zero to have a new identifier calculated automatically.</param>
            <param name="name">The name of the new axis.</param>
            <returns>
            The axis description of the newly created calculated axis.
            </returns>
            <remarks>
            Button axes are useful to simulate one axis of a joypad or a joystick with the help of two individual buttons. One button acts as pushing the 
            joystick into the positve direction along the given axis by animating the axis' value to 1 and the a second button acts as pushing the joystick 
            into the negative direction by animating the value to -1. Releasing both buttons will animate the value to 0. Pushing both buttons simultaneously
            will stop the animation and keep the value at its current amount.
            There is a user-defineable acceleration and deceleration period, so a simulation resulting on this input delivers a feeling of inertance.
            </remarks>
        </member>
        <member name="T:Fusee.Engine.Core.JometriMesh">
            <inheritdoc />
            <summary>
            Creates a fusee-compatible mesh from a triangulated Jometri geometry
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.JometriMesh.#ctor(Fusee.Jometri.Geometry)">
            <summary>
            Creates a fusee-compatible mesh from a Jometri geometry
            </summary>
            <param name="geometry">The triangulated Jometri geometry, saved in a doubly connected edge list</param>
        </member>
        <member name="T:Fusee.Engine.Core.KeyboardDevice">
            <summary>
            Special case of an <see cref="T:Fusee.Engine.Core.InputDevice"/> identifying itself as a <see cref="F:Fusee.Engine.Common.DeviceCategory.Keyboard"/>.
            Defines convenience methods to access the keyboard buttons.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.KeyboardDevice.#ctor(Fusee.Engine.Common.IInputDeviceImp)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.KeyboardDevice"/> class.
            </summary>
            <param name="inpDeviceImp">The platform dependent connector to the underlying physical device.</param>
        </member>
        <member name="M:Fusee.Engine.Core.KeyboardDevice.GetKey(Fusee.Engine.Common.KeyCodes)">
            <summary>
            Retrieves the current button state for the specified key.
            </summary>
            <value>
            true if the button is pressed; otherwise false.
            </value>
            <param name="key">The key to check.</param>
        </member>
        <member name="M:Fusee.Engine.Core.KeyboardDevice.IsKeyDown(Fusee.Engine.Common.KeyCodes)">
            <summary>
            Determines whether the the specified key was pressed during the current frame.
            The result is true only for one single frame even if the key is still pressed 
            in subsequent frames.
            </summary>
            <param name="key">The key to check.</param>
            <returns>true if the key was pressed during the current frame, false if the key
            was not pressed during the current frame - even if the key was not released yet.
            </returns>
        </member>
        <member name="M:Fusee.Engine.Core.KeyboardDevice.IsKeyUp(Fusee.Engine.Common.KeyCodes)">
            <summary>
            Determines whether the the specified key was released during the current frame.
            The result is true only for one single frame even if the key is still up
            in subsequent frames.
            </summary>
            <param name="key">The key to check.</param>
            <returns>true if the key was released during the current frame, false if the key
            was not released during the current frame - even if the key currently is released.
            </returns>
        </member>
        <member name="P:Fusee.Engine.Core.KeyboardDevice.UpDownAxis">
            <summary>
            Gets the value at the (calculated) axis controlled with the Up/Down cursor keys.
            </summary>
            <returns>The  axis' value in the range between [-1, 1]</returns>
        </member>
        <member name="P:Fusee.Engine.Core.KeyboardDevice.LeftRightAxis">
            <summary>
            Gets the value at the (calculated) axis controlled with the Left/Right cursor keys.
            </summary>
            <returns>The  axis' value in the range between [-1, 1]</returns>
        </member>
        <member name="P:Fusee.Engine.Core.KeyboardDevice.ADAxis">
            <summary>
            Gets the value at the (calculated) axis controlled with the A and the D key.
            This is the horizontal component of the four key WASD left-handed game steering paradigm
            </summary>
            <returns>The  axis' value in the range between [-1, 1]</returns>
        </member>
        <member name="P:Fusee.Engine.Core.KeyboardDevice.WSAxis">
            <summary>
            Gets the value at the (calculated) axis controlled with the A and the D key.
            This is the vertical component of the four key WASD left-handed game steering paradigm
            </summary>
            <returns>The  axis' value in the range between [-1, 1]</returns>
        </member>
        <member name="T:Fusee.Engine.Core.MeshReader">
            <summary>
                This class is used to load 3D Models in .obj format into memory.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.MeshReader.Double_Parse(System.String)">
            <summary>
                Replacement for double.Parse(s, [InvariantCulture])
                Hack needed for JSIL.
            </summary>
            <param name="s">string to parse</param>
            <returns>A double number</returns>
        </member>
        <member name="M:Fusee.Engine.Core.MeshReader.ReadWavefrontObj(System.IO.TextReader)">
            <summary>
                Parses the contents of the TextReader object passed to the method and tries to
                interpret the contents as a <a href="http://en.wikipedia.org/wiki/Wavefront_.obj_file">Wavefront obj</a> file.
                Creates a Mesh object from the contents.
            </summary>
            <param name="tr">The initialized TextReader (can be either a StreamReader or a StringReader)</param>
            <returns>The newly created Mesh object</returns>
        </member>
        <member name="M:Fusee.Engine.Core.MeshReader.LoadGeometry(System.IO.Stream)">
            <summary>
                This method loads an object file and returns it as a geometry.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>The newly created Mesh object</returns>
        </member>
        <member name="M:Fusee.Engine.Core.MeshReader.LoadMesh(System.IO.Stream)">
            <summary>
                This method loads an object file and returns it as a mesh.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>The newly created Mesh object</returns>
        </member>
        <member name="M:Fusee.Engine.Core.MeshReader.FilteredSplit(System.String,System.Char[])">
            <summary>
                This method is used to split a string in a list of strings based on the separator passed to the method.
            </summary>
            <param name="strIn">The string.</param>
            <param name="separator">The separator.</param>
            <returns>An array of string with all separated values.</returns>
        </member>
        <member name="T:Fusee.Engine.Core.MouseDevice">
            <summary>
            Special case of an <see cref="T:Fusee.Engine.Core.InputDevice"/> identifying itself as a <see cref="F:Fusee.Engine.Common.DeviceCategory.Mouse"/>.
            Defines convenience methods to access the typical mouse axes and buttons. Registers
            the mouse velocity derived axes.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.MouseDevice.#ctor(Fusee.Engine.Common.IInputDeviceImp)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.MouseDevice"/> class.
            </summary>
            <param name="inpDeviceImp">The platform dependent connector to the underlying physical device.</param>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.PositionInt">
            <summary>
            Gets the current position relative to the upper left corner of the rendering window.
            The returned values are integers.
            </summary>
            <value>
            The mouse position. z contains the wheel's value.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.Position">
            <summary>
            Gets the current position relative to the upper left corner of the rendering window.
            </summary>
            <value>
            The current position of the mouse.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.X">
            <summary>
            Gets the mouse's x value.
            </summary>
            <value>
            Number of pixels from the left border of the rendering window to the current mouse position.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.Y">
            <summary>
            Gets the mouse's y value.
            </summary>
            <value>
            Number of pixels from the upper border of the rendering window to the current mouse position.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.Wheel">
            <summary>
            Gets the current wheel value.
            </summary>
            <value>
            The wheel value.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.VelocityInt">
            <summary>
            Retrieves the current mouse velocity (speed) on screen in pixels/second.
            Return values are integers. 
            </summary>
            <value>
            The mouse velocity. 
            z contains the wheel velocity.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.Velocity">
            <summary>
            Retrieves the current mouse velocity (speed) on screen in pixels/second.
            </summary>
            <value>
            The mouse velocity. 
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.XVel">
            <summary>
            Retrieves the current mouse velocity in x direction. 
            </summary>
            <value>
            The x velocity.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.YVel">
            <summary>
            Retrieves the current mouse velocity in y direction. 
            </summary>
            <value>
            The y velocity.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.WheelVel">
            <summary>
            Retrieves the current mouse wheel velocity. 
            </summary>
            <value>
            The velocity of the mouse wheel.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.XDesc">
            <summary>
            Retrieves information about the x axis.
            </summary>
            <value>
            The description for the x axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.YDesc">
            <summary>
            Retrieves information about the y axis.
            </summary>
            <value>
            The description for the y axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.WheelDesc">
            <summary>
            Retrieves information about the mouse wheel axis.
            </summary>
            <value>
            The description for the mouse wheel axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.XVelDesc">
            <summary>
            Retrieves information about the x velocity axis.
            </summary>
            <value>
            The description for the x velocity axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.YVelDesc">
            <summary>
            Retrieves information about the y velocity axis.
            </summary>
            <value>
            The description for the y velocity  axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.WheelVelDesc">
            <summary>
            Retrieves information about the mouse wheel velocity axis.
            </summary>
            <value>
            The description for the mouse wheel velocity axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.LeftButton">
            <summary>
            Retrieves the current state of the left mouse button.
            </summary>
            <value>
            <c>true</c> if the left mouse button is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.MiddleButton">
            <summary>
            Retrieves the current state of the middle mouse button.
            </summary>
            <value>
            <c>true</c> if the left middle button is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.RightButton">
            <summary>
            Retrieves the current state of the right mouse button.
            </summary>
            <value>
            <c>true</c> if the left right button is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.LeftButtonDesc">
            <summary>
            Retrieves information about the left mouse button.
            </summary>
            <value>
            The description for the left mouse button.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.MiddleButtonDesc">
            <summary>
            Retrieves information about the middle mouse button.
            </summary>
            <value>
            The description for the middle mouse button.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.MouseDevice.RightButtonDesc">
            <summary>
            Retrieves information about the right mouse button.
            </summary>
            <value>
            The description for the right mouse button.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.RigidBody">
            <summary>
            The RigidBody class ...
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.RigidBody.Rotation">
            <summary>
            The orientation of the rigidbody in world space stored as a Quaternion.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.RigidBody.ApplyForce(Fusee.Math.Core.float3,Fusee.Math.Core.float3)">
            <summary>
            Adds a force to the rigidbody. As a result the rigidbody will start moving.
            </summary>
            <param name="force"></param>
            <param name="relPos"></param>
        </member>
        <member name="M:Fusee.Engine.Core.RigidBody.ApplyTorque(Fusee.Math.Core.float3)">
            <summary>
            Adds a torque to the rigidbody.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.RigidBody.ApplyCentralImpulse(Fusee.Math.Core.float3)">
            <summary>
            Adds an impulse 
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.AABBCalculator">
            <summary>
            Axis-Aligned Bounding Box Calculator. Use instances of this class to calculate axis-aligned bounding boxes
            on scenes, list of scene nodes or individual scene nodes. Calculations always include any child nodes.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.AABBCalculator.#ctor(Fusee.Serialization.SceneContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.AABBCalculator"/> class.
            </summary>
            <param name="sc">The scene container to calculate an axis-aligned bounding box for.</param>
        </member>
        <member name="M:Fusee.Engine.Core.AABBCalculator.#ctor(System.Collections.Generic.IEnumerable{Fusee.Serialization.SceneNodeContainer})">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.AABBCalculator"/> class.
            </summary>
            <param name="sncList">The list of scene nodes to calculate an axis-aligned bounding box for.</param>
        </member>
        <member name="M:Fusee.Engine.Core.AABBCalculator.#ctor(Fusee.Serialization.SceneNodeContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.AABBCalculator"/> class.
            </summary>
            <param name="snc">A single scene node to calculate an axis-aligned bounding box for.</param>
        </member>
        <member name="M:Fusee.Engine.Core.AABBCalculator.GetBox">
            <summary>
            Performs the calculation and returns the resulting box on the object(s) passed in the constructor. Any calculation
            always includes a full traversal over all child nodes.
            </summary>
            <returns>The resulting axis-aligned bounding box.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.AABBCalculator.OnTransform(Fusee.Serialization.TransformComponent)">
            <summary>
            Do not call. Used for internal traversal purposes only
            </summary>
            <param name="transform">The transform component.</param>
        </member>
        <member name="M:Fusee.Engine.Core.AABBCalculator.OnMesh(Fusee.Serialization.Mesh)">
            <summary>
            Do not call. Used for internal traversal purposes only
            </summary>
            <param name="mesh">The mesh component.</param>
        </member>
        <member name="T:Fusee.Engine.Core.LightingCalculationMethod">
            <summary>
            All supported lightning calculation methods LegacyShaderCodeBuilder.cs supports.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Fusee.Engine.Core.LightingCalculationMethod.SIMPLE" -->
        <member name="F:Fusee.Engine.Core.LightingCalculationMethod.ADVANCED">
            <summary>
            Physical based shading
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightingCalculationMethod.ADVANCEDwENVMAP">
            <summary>
            Physical based shading with environment cube map algorithm
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.SceneRenderer">
            <summary>
            Use a Scene Renderer to traverse a scene hierarchy (made out of scene nodes and components) in order
            to have each visited element contribute to the result rendered against a given render context.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.SceneRenderer.DoRenderWithShadows">
            <summary>
            Try to render with Shadows. If not possible, fallback to false.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.SceneRenderer.DoRenderDeferred">
            <summary>
            Try to render deferred. If not possible, fallback to false.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.SceneRenderer.DoRenderEnvMap">
            <summary>
            Try to render with EM. If not possible, fallback to false.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.LightResult">
            <summary>
            This struct saves a light found by a Viserator with all parameters
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.Active">
            <summary>
            Represents the light status.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.Position">
            <summary>
            Represents the position of the light.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.Color">
            <summary>
            Represents the color.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.Attenuation">
            <summary>
            Represents the attenuation of the light.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.AmbientCoefficient">
            <summary>
            Represents the ambient coefficient of the light.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.Type">
            <summary>
            Represents the type of the light.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.ConeAngle">
            <summary>
            Represents the spot angle of the light.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.ConeDirection">
            <summary>
            Represents the cone direction of the light.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.ModelMatrix">
            <summary>
            The ModelMatrix of the light
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.PositionWorldSpace">
            <summary>
            The light's position in World Coordiantes.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.ConeDirectionWorldSpace">
            <summary>
            The cone's direction in WorldSpace
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.PositionModelViewSpace">
            <summary>
            The lights's position in ModelView Coordinates.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.LightResult.ConeDirectionModelViewSpace">
            <summary>
            The cone's position in ModelViewCoordinates
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.LightSetupState.Model">
            <summary>
            Gets or sets the top of the Model matrix stack. The Model matrix transforms model coordinates into world coordinates.
            </summary>
            <value>
            The Model matrix.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.LightSetupState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.LightSetupState"/> class.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.LegacyShaderCodeBuilder.#ctor(Fusee.Serialization.MaterialPBRComponent,Fusee.Serialization.Mesh,Fusee.Serialization.WeightComponent)">
            <summary>
            If we have a MaterialPBRComponent this constructor is called.
            </summary>
            <param name="mlc">The MaterialLightComponent</param>
            <param name="pbrMaterialPbrComponent"></param>
            <param name="mesh">The Mesh</param>
            <param name="wc">WeightCompoennt for animations</param>
        </member>
        <member name="M:Fusee.Engine.Core.LegacyShaderCodeBuilder.#ctor(Fusee.Serialization.MaterialLightComponent,Fusee.Serialization.Mesh,Fusee.Serialization.WeightComponent)">
            <summary>
            If we have a MaterialLightComponent this constructor is called.
            </summary>
            <param name="mlc">The MaterialLightComponent</param>
            <param name="mesh">The Mesh</param>
            <param name="wc">WeightCompoennt for animations</param>
        </member>
        <member name="T:Fusee.Engine.Core.ShaderEffectComponent">
            <summary>
            Use this component in Code. Will not serialize/deserialize
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderEffectComponent.Effect">
            <summary>
            The effect.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffectManager.#ctor(Fusee.Engine.Core.RenderContext)">
            <summary>
            Creates a new Instance of ShaderEffectManager. Th instance is handling the memory allocation and deallocation on the GPU by observing ShaderEffect.cs objects.
            </summary>
            <param name="renderContextImp">The RenderContextImp is used for GPU memory allocation and deallocation. See RegisterShaderEffect.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffectManager.Cleanup">
            <summary>
            Call this method on the mainthread after RenderContext.Render in order to cleanup all not used Buffers from GPU memory.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.ShaderMaterial">
            <summary>
            Handles settings of shaderprograms. Currently not implemented.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderMaterial.#ctor(Fusee.Engine.Core.ShaderProgram)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.ShaderMaterial"/> class.
            </summary>
            <param name="program">The <see cref="T:Fusee.Engine.Core.ShaderProgram"/>.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderMaterial.GetShader">
            <summary>
            Gets the shaderprogram.
            </summary>
            <returns>A <see cref="T:Fusee.Engine.Core.ShaderProgram"/>.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderMaterial.UpdateMaterial(Fusee.Engine.Core.RenderContext)">
            <summary>
            Updates the material.
            </summary>
            <param name="rc">The rc.</param>
        </member>
        <member name="T:Fusee.Engine.Core.ShaderProgram">
            <summary>
            Instances of this class represent a pair of a Vertex and a Pixel shader code, both compiled an 
            uploaded to the gpu ready to be used. 
            </summary>
            <remarks>See <see cref="M:Fusee.Engine.Core.RenderContext.CreateShader(System.String,System.String)"/> how to create instances and 
            <see cref="M:Fusee.Engine.Core.RenderContext.SetShader(Fusee.Engine.Core.ShaderProgram)"/> how to use instances as the current shaders.</remarks>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderProgram.#ctor(Fusee.Engine.Common.IRenderContextImp,Fusee.Engine.Common.IShaderProgramImp)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.ShaderProgram"/> class.
            </summary>
            <param name="renderContextImp">The <see cref="T:Fusee.Engine.Common.IRenderContextImp"/>.</param>
            <param name="shaderProgramImp">The <see cref="T:Fusee.Engine.Common.IShaderProgramImp"/>.</param>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderProgram.GetShaderParam(System.String)">
            <summary>
            Retrieves an identifier for the shader parameter name.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <returns>A <see cref="T:Fusee.Engine.Common.IShaderParam"/> if paramName is declared and used as a uniform parameter within the shader program. Otherwise null</returns>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderProgram.GetShaderParamInfo(System.String)">
            <summary>
            Gets the shader parameter.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <returns>A <see cref="T:Fusee.Engine.Common.ShaderParamInfo"/> object if paramName is declared and used as a uniform parameter within the shader program. Otherwise the Handle field of the returndes struct is null</returns>
        </member>
        <member name="T:Fusee.Engine.Core.Network">
            <summary>
            Core network object. Handles all connections by accessing underlying interface implementations.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Network.Status">
            <summary>
            Gets or sets the status of the network. <see cref="T:Fusee.Engine.Common.NetStatusValues"/>.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Network.Config">
            <summary>
            Gets or sets the configuration. <see cref="T:Fusee.Engine.Common.NetConfigValues"/>
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Network.Connections">
            <summary>
            Gets all connections of type <see cref="T:Fusee.Engine.Common.INetworkConnection"/>.
            </summary>
            <value>
            The connections.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Network.LocalIP">
            <summary>
            Gets the local ip. Do not use this often due to performance reasons.
            </summary>
            <value>
            The local ip as a string, e.g. 127.0.0.1
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Network.IncomingMsgCount">
            <summary>
            Gets the incoming message's count.
            </summary>
            <value>
            The incoming message count.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.Network.IncomingMsg">
            <summary>
            Gets the incoming <see cref="T:Fusee.Engine.Common.INetworkMsg"/>.
            </summary>
            <value>
            The incoming message.
            </value>
        </member>
        <member name="E:Fusee.Engine.Core.Network.OnConnectionUpdate">
            <summary>
            Occurs when [on connection update] occurs and passes the event over to the network interface implementation.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Network.StartPeer">
            <summary>
            Initializes the peer on default port 14242.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Network.StartPeer(System.Int32)">
            <summary>
            Initializes the peer on specified port.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Fusee.Engine.Core.Network.OpenConnection(System.String)">
            <summary>
            Opens the connection on default port 14242 and specified host.
            </summary>
            <param name="host">The host (e.g. 127.0.0.1).</param>
        </member>
        <member name="M:Fusee.Engine.Core.Network.OpenConnection(System.Int32)">
            <summary>
            Opens the connection on specified port.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Fusee.Engine.Core.Network.OpenConnection(System.String,System.Int32)">
            <summary>
            Opens the connection on specified port and host.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Fusee.Engine.Core.Network.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Network.SendMessage(System.Byte[])">
            <summary>
            Sends the message with <see cref="T:Fusee.Engine.Common.MessageDelivery"/>.RealiableOrdered on channel 0.
            </summary>
            <param name="msg">The message in byte[].</param>
            <returns>True if the message arrived.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Network.SendMessage(System.Byte[],Fusee.Engine.Common.MessageDelivery,System.Int32)">
            <summary>
            Sends the message with options.
            </summary>
            <param name="msg">The message in byte[].</param>
            <param name="msgDelivery">The <see cref="T:Fusee.Engine.Common.MessageDelivery"/>.</param>
            <param name="channelID">The channel identifier.</param>
            <returns>True if the message arrived.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.Network.SendDiscoveryMessage">
            <summary>
            Sends the discovery message on default port 14242.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Network.SendDiscoveryMessage(System.Int32)">
            <summary>
            Sends the discovery message on specified port.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Fusee.Engine.Core.Network.CloseDevice">
            <summary>
            Closes all network connections.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Network.Instance">
            <summary>
            Provides the Instance of the Network Class.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.Network.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Network.FirstMessage">
            <summary>
            Firsts the message.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fusee.Engine.Core.DummyNetworkImp">
            <summary>
            Dummy implementation without functinoality
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.DummyNetworkImp.Config">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.DummyNetworkImp.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.GetLocalIp">
            <summary>
            Gets the local ip.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Fusee.Engine.Core.DummyNetworkImp.IncomingMsg">
            <summary>
            Gets the incoming MSG.
            </summary>
            <value>
            The incoming MSG.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.StartPeer(System.Int32)">
            <summary>
            Starts the peer.
            </summary>
            <param name="port">The port.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="E:Fusee.Engine.Core.DummyNetworkImp.ConnectionUpdate">
            <summary>
            Occurs when [connection update].
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.SendMessage(System.Byte[],Fusee.Engine.Common.MessageDelivery,System.Int32)">
            <summary>
            Sends the message.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="msgDelivery">The MSG delivery.</param>
            <param name="msgChannel">The MSG channel.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.SendDiscoveryMessage(System.Int32)">
            <summary>
            Sends the discovery message.
            </summary>
            <param name="port">The port.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.OnUpdateFrame">
            <summary>
            Called when [update frame].
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fusee.Engine.Core.DummyNetworkImp.CloseDevices">
            <summary>
            Closes the devices.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:Fusee.Engine.Core.ParticleEmitter.ParticleMesh">
            <summary>
            The entire particle system consists of one mesh.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ParticleEmitter.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,System.Double,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ParticleEmittter class.
            </summary>
            <param name="myCount"></param>
            <param name="myLifeMin"></param>
            <param name="myLifeMax"></param>
            <param name="myMinSize"></param>
            <param name="myMaxSize"></param>
            <param name="myRotation"></param>
            <param name="myTransparency"></param>
            <param name="myRandPosX"></param>
            <param name="myRandPosY"></param>
            <param name="myRandPosZ"></param>
            <param name="myRandVelX"></param>
            <param name="myRandVelY"></param>
            <param name="myRandVelZ"></param>
            <param name="myGravityX"></param>
            <param name="myGravityY"></param>
            <param name="myGravityZ"></param>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.LifeMin">
            <summary>
            Gets and sets the minimum life of the particles.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.LifeMax">
            <summary>
            Gets and sets the maximum life of the particles.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.MinSize">
            <summary>
            Gets and sets the minimum size of the particles.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.MaxSize">
            <summary>
            Gets and sets the maximum size of the particles.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.Transparency">
            <summary>
            Gets and sets the transparency of particles.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.RandPosX">
            <summary>
            Gets and sets the random position on the x-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.RandPosY">
            <summary>
            Gets and sets the random position on the y-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.RandPosZ">
            <summary>
            Gets and sets the random position on the z-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.RandVelX">
            <summary>
            Gets and sets the random velocity towards the x-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.RandVelY">
            <summary>
            Gets and sets the random velocity towards the y-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.RandVelZ">
            <summary>
            Gets and sets the random velocity towards the z-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.GravityX">
            <summary>
            Gets and sets the gravity towards the x-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.GravityY">
            <summary>
            Gets and sets the gravity towards the y-axis.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.ParticleEmitter.GravityZ">
            <summary>
            Gets and sets the gravity towards the z-axis.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ParticleEmitter.Tick(System.Double)">
            <summary>
            This method fills the particleList with data, creates the particle mesh and manipulates the information of particleList.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="T:Fusee.Engine.Core.RenderCanvas">
            <summary>
                A render canvas object references the physical output screen space real estate (e.g. the rendering window).
                A typical Game application will inherit from this class and overrite methods to implement your user code to
                to be performed on events like initialization, resize, and display refresh.
                In the future, it will be likely that this class' functionality will be divided at two different places with
                one containing the more view oriented aspects and the other containing the more application oriented aspects.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.CanvasImplementor">
            <summary>
                Gets or sets the canvas implementor.
            </summary>
            <value>
                The canvas implementor.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.ContextImplementor">
            <summary>
                Gets or sets the RenderContext implementor.
            </summary>
            <value>
                The context implementor.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.AudioImplementor">
            <summary>
                Gets or sets the audio implementor.
            </summary>
            <value>
                The audio implementor.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.InputDriverImplementor">
            <summary>
                Gets or sets the input driver implementor.
            </summary>
            <value>
                The input driver implementor.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.VideoManagerImplementor">
            <summary>
                Gets or sets the video manager implementor.
            </summary>
            <value>
                The video manager implementor.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.NetworkImplementor">
            <summary>
                Gets or sets the network implementor.
            </summary>
            <value>
                The network implementor.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.RC">
            <summary>
                Returns the render context object.
            </summary>
            <value>
                Use the render context (<see cref="T:Fusee.Engine.Core.RenderContext" />) to fill the render canvas with 3d contents.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.GetAppName">
            <summary>
                Gets the name of the app.
            </summary>
            <returns>Name of the app as string.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.GetWindowWidth">
            <summary>
                Gets the width of the application's window.
            </summary>
            <returns>Width of the application's window as int.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.GetWindowHeight">
            <summary>
                Gets the height of the application's window.
            </summary>
            <returns>Height of the application's window as int.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.InitCanvas">
            <summary>
                Inits the canvas for the rendering loop.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.RenderAFrame">
            <summary>
                Callback method to invoke user code for rendering a frame.
            </summary>
            <remarks>
                Override this method in inherited classes of RenderCanvas to render 3D contents. Typically, an application will
                use the render context (<see cref="P:Fusee.Engine.Core.RenderCanvas.RC" />) to achieve this. Consider the code you implement here as the body of the
                application's rendering loop.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.Init">
            <summary>
                Callback method to invoke user code after initialization of the render canvas.
            </summary>
            <remarks>
                Override this method in inherited classes of RenderCanvas to apply initialization code. Typically, an application
                will call one-time initialization code on the render context (<see cref="P:Fusee.Engine.Core.RenderCanvas.RC" />) to set render states.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.DeInit">
            <summary>
                Used to release the ressources of all audio and network instances.
                All audio and network ressources get reset.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.Resize">
            <summary>
                Callback method to invoke user code when the render canvas size changes.
            </summary>
            <remarks>
                Override this method in inherited classes of RenderCanvas to apply window resize code. Typically, an application
                will change the projection matrix of the render context (<see cref="P:Fusee.Engine.Core.RenderCanvas.RC" />) to match the new aspect ratio.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.SetCursor(Fusee.Engine.Common.CursorType)">
            <summary>
                Set the cursor (the mouse pointer image) to one of the pre-defined types
            </summary>
            <param name="cursorType">The type of the cursor to set.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.OpenLink(System.String)">
            <summary>
                Opens the given URL in the user's standard web browser. The link MUST start with "http://".
            </summary>
            <param name="link">The URL to open</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.Run">
            <summary>
                Runs this instance.
            </summary>
            <remarks>
                Users should call this method of their RenderCanvas instance to start the application. The RenderCanvas will then
                do all
                necessary initialization, call the Init method and enter the application main loop.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.Present">
            <summary>
                Presents the contents of the backbuffer on the visible part of this render canvas.
            </summary>
            <remarks>
                Call this method from your rendering code implementation <see cref="M:Fusee.Engine.Core.RenderCanvas.RenderAFrame" /> after rendering geometry on
                the rendering context.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.SetWindowSize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Sets the size of the output window for desktop development.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="posx">The x position of the window.</param>
            <param name="posy">The y position of the window.</param>
            <param name="borderHidden">Show the window border or not.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderCanvas.CloseGameWindow">
            <summary>
                Closes the GameWindow with a call to opentk.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.Width">
            <summary>
                Retrieves the width of the canvas.
            </summary>
            <value>
                The width in pixels.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.Height">
            <summary>
                Retrieves the height of the canvas.
            </summary>
            <value>
                The height in pixels.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.VSync">
            <summary>
                Gets or sets a value indicating whether VSync is active.
            </summary>
            <value>
                <c>true</c> if VSync is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.RenderCanvas.Fullscreen">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Fusee.Engine.Core.RenderCanvas" /> is fullscreen.
            </summary>
            <value>
                <c>true</c> if fullscreen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Fusee.Engine.Core.RenderContext">
            <summary>
            The render context contains all functions necessary to manipulate the underlying rendering hardware. Use this class' elements
            to render geometry to the RenderCanvas associated with this context. If you have worked with OpenGL or DirectX before you will find
            many similarities in this class' methods and properties.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.RenderContext._allFXParams">
            <summary>
            All global FX Params
            Overwrites values with the same name in current ShaderEffect
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetFXParam(System.String,System.Object)">
            <summary>
            Sets global FX Params
            Overwrites values with the same name in current ShaderEffect
            </summary>
            <param name="name">FX Param name</param>
            <param name="value">FX Param value</param>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.View">
            <summary>
            The View matrix used by the rendering pipeline.
            </summary>
            <value>
            The view matrix.
            </value>
            <remarks>
            This matrix is also reffered often as the camera transformation(not the projection). 
            It describes the orientation of the view that is used to render a scene.
            You can use <see cref="M:Fusee.Math.Core.float4x4.LookAt(Fusee.Math.Core.float3,Fusee.Math.Core.float3,Fusee.Math.Core.float3)"/> to create a valid view matrix and analyze how it is build up.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.Model">
            <summary>
            The Model matrix used by the rendering pipeline.
            </summary>
            <value>
            The model matrix.
            </value>
            <remarks>
            Model coordinates are the coordinates directly taken from the model (the mesh geometry - <see cref="T:Fusee.Serialization.Mesh"/>).
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.ModelView">
            <summary>
            The ModelView matrix used by the rendering pipeline.
            </summary>
            <value>
            The 4x4 ModelView matrix defining the transformation applied to model coordinates yielding view coordinates.
            </value>
            <remarks>
            Model coordinates are the coordinates directly taken from the model (the mesh geometry - <see cref="T:Fusee.Serialization.Mesh"/>). The rendering pipeline
            transforms these coordinates into View coordinates. Further down the pipeline the coordinates will be transformed to screen coordinates to allow the
            geometry to be rendered to pixel positions on the screen. The ModelView matrix defines the transformations performed on the original model coordinates
            to yield view coordinates. In most cases the matrix is a composition of several translations, rotations, and scale operations.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.Projection">
            <summary>
            The projection matrix used by the rendering pipeline
            </summary>
            <value>
            The 4x4 projection matrix applied to view coordinates yielding clip space coordinates.
            </value>
            <remarks>
            View coordinates are the result of the ModelView matrix multiplied to the geometry (<see cref="P:Fusee.Engine.Core.RenderContext.ModelView"/>).
            The coordinate system of the view space has its origin in the camera center with the z axis aligned to the viewing direction, and the x- and
            y axes aligned to the viewing plane. Still, no projection from 3d space to the viewing plane has been performed. This is done by multiplying
            view coordinate geometry wihth the projection matrix. Typically, the projection matrix either performs a parallel projection or a perspective
            projection.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.ModelViewProjection">
            <summary>
            The combination of the ModelView and Projection matrices.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix multiplaction of the ModelView and the Projection matrix.
            </value>
            <remarks>
            <see cref="P:Fusee.Engine.Core.RenderContext.ModelView"/> and <see cref="P:Fusee.Engine.Core.RenderContext.Projection"/>.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvView">
            <summary>
            Gets the inverted View matrix.
            </summary>
            <value>
            The inverted view matrix.
            </value>
            <remarks>
            If the View matrix is orthogonal (i.e. contains no scale component), its inverse matrix
            is equal to its transpose matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.View"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransView"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvModel">
            <summary>
            Gets the inverted Model matrix.
            </summary>
            <value>
            The inverted Model matrix.
            </value>
            <remarks>
            If the Model matrix is orthogonal (i.e. contains no scale component), its inverse matrix
            is equal to its transpose matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.Model"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransModel"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvModelView">
            <summary>
            The inverse of the ModelView matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion applied to the ModelView matrix.
            </value>
            <remarks>
            If the ModelView matrix is orthogonal (i.e. contains no scale component), its inverse matrix
            is equal to its transpose matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.ModelView"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransModelView"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvProjection">
            <summary>
            The inverse of the Projection matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion applied to the Projection matrix.
            </value>
            <remarks>
            If the Projection matrix is orthogonal (i.e. contains no scale component), its inverse matrix
            is equal to its transpose matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.Projection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransProjection"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvModelViewProjection">
            <summary>
            The inverse of the ModelViewProjection matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion applied to the ModelViewProjection matrix.
            </value>
            <remarks>
            If the ModelViewProjection matrix is orthogonal (i.e. contains no scale component), its inverse matrix
            is equal to its transpose matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.ModelViewProjection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransModelViewProjection"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.TransView">
            <summary>
            The transpose of the View matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix transpose applied to the View matrix.
            </value>
            <remarks>
            If the View matrix is orthogonal (i.e. contains no scale component), its transpose matrix
            is equal to its inverse matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.View"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvView"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.TransModel">
            <summary>
            The transpose of the Model matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix transpose applied to the Model matrix.
            </value>
            <remarks>
            If the Model matrix is orthogonal (i.e. contains no scale component), its transpose matrix
            is equal to its inverse matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.Model"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvModel"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.TransModelView">
            <summary>
            The transpose of the ModelView matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix transpose applied to the ModelView matrix.
            </value>
            <remarks>
            If the ModelView matrix is orthogonal (i.e. contains no scale component), its transpose matrix
            is equal to its inverse matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.ModelView"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvModelView"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.TransProjection">
            <summary>
            The transpose of the Projection matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix transpose applied to the Projection matrix.
            </value>
            <remarks>
            If the Projection matrix is orthogonal (i.e. contains no scale component), its transpose matrix
            is equal to its inverse matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.Projection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvProjection"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.TransModelViewProjection">
            <summary>
            The transpose of the ModelViewProjection matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix transpose applied to the ModelViewProjection matrix.
            </value>
            <remarks>
            If the ModelViewProjection matrix is orthogonal (i.e. contains no scale component), its transpose matrix
            is equal to its inverse matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.ModelViewProjection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvModelViewProjection"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvTransView">
            <summary>
            The inverse transpose of the View matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion and transpose applied to the View matrix.
            </value>
            <remarks>
            If the View matrix is orthogonal (i.e. contains no scale component), its inverse transpose matrix
            is the same as the original View matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.View"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvView"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransView"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvTransModel">
            <summary>
            The inverse transpose of the Model matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion and transpose applied to the Model matrix.
            </value>
            <remarks>
            If the Model matrix is orthogonal (i.e. contains no scale component), its inverse transpose matrix
            is the same as the original Model matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.Model"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvModel"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransModel"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvTransModelView">
            <summary>
            The inverse transpose of the ModelView matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion and transpose applied to the ModelView matrix.
            </value>
            <remarks>
            If the ModelView matrix is orthogonal (i.e. contains no scale component), its inverse transpose matrix
            is the same as the original ModelView matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.ModelView"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvModelView"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransModelView"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvTransProjection">
            <summary>
            The inverse transpose of the Projection matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion and transpose applied to the Projection matrix.
            </value>
            <remarks>
            If the Projection matrix is orthogonal (i.e. contains no scale component), its inverse transpose matrix
            is the same as the original Projection matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.Projection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvProjection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransProjection"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.InvTransModelViewProjection">
            <summary>
            The inverse transpose of the ModelViewProjection matrix.
            </summary>
            <value>
            The 4x4 matrix resulting from the matrix inversion and transpose applied to the ModelViewProjection matrix.
            </value>
            <remarks>
            If the ModelViewProjection matrix is orthogonal (i.e. contains no scale component), its inverse transpose matrix
            is the same as the original ModelViewProjection matrix.
            </remarks>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.ModelViewProjection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.InvModelViewProjection"/>
            <seealso cref="P:Fusee.Engine.Core.RenderContext.TransModelViewProjection"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.#ctor(Fusee.Engine.Common.IRenderContextImp)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.RenderContext"/> class.
            </summary>
            <param name="rci">The <see cref="T:Fusee.Engine.Common.IRenderContextImp"/>.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.UpdateTextureFromVideoStream(Fusee.Engine.Common.IVideoStreamImp,Fusee.Engine.Core.Texture)">
            <summary>
            Copies the current frame image from a <see cref="T:Fusee.Engine.Common.IVideoStreamImp"/> into the given Texture.
            </summary>
            <param name="stream">The <see cref="T:Fusee.Engine.Common.IVideoStreamImp"/> that will be used as source.</param>
            <param name="tex">The <see cref="T:Fusee.Engine.Core.Texture"/> in which the video streams current frame will be copied into.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.UpdateTextureRegion(Fusee.Engine.Core.Texture,Fusee.Engine.Core.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates a rectangular region of a given Texture (dstTexture) by copying a rectangular block from another texture (srcTexture).
            </summary>
            <param name="dstTexture">This Textures region will be updated.</param>
            <param name="srcTexture">This is the source from which the region will be copied.</param>
            <param name="startX">x offset in pixels.</param>
            <param name="startY">y offset in pixels.</param>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.CreateTexture(Fusee.Engine.Core.Texture,System.Boolean)">
            <summary>
            Creates a new texture and binds it to the shader.
            </summary>
            <remarks>
            Method should be called after LoadImage method to process
            the BitmapData an make them available for the shader.
            </remarks>
            <param name="imgData">An ImageData struct, containing necessary information for the upload to the graphics card.</param>
            <param name="repeat">Indicating if the texture should be clamped or repeated.</param>
            <returns>
            An <see cref="T:Fusee.Engine.Core.Texture"/> that can be used for texturing in the shader.
            </returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.CreateWritableTexture(System.Int32,System.Int32,Fusee.Engine.Common.WritableTextureFormat)">
            <summary>
            Creates a new writable texture and binds it to the shader.
            This is done by creating a framebuffer and a renderbuffer (if needed).
            All bufferhandles are returned with the texture.
            For binding this texture call <see cref="M:Fusee.Engine.Core.RenderContext.SetRenderTarget(Fusee.Engine.Core.Texture)"/>
            <param name="width"></param>
            <param name="height"></param>SetRenderTarget
            <param name="textureFormat">The format of writable texture (e.g. Depthbuffer, G-Buffer, ...)</param>
            </summary>
            <returns>
            An <see cref="T:Fusee.Engine.Common.ITexture"/>ITexture that can be used for of screen rendering
            </returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParamTexture(Fusee.Engine.Common.IShaderParam,Fusee.Engine.Core.Texture)">
            <summary>
            Sets a Shader Parameter to a created texture.
            </summary>
            <param name="param">Shader Parameter used for texture binding.</param>
            <param name="texture">An ITexture.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParamTexture(Fusee.Engine.Common.IShaderParam,Fusee.Engine.Common.ITextureHandle,Fusee.Engine.Common.GBufferHandle)">
            <summary>
            Sets a Shader Parameter to a created texture.
            </summary>
            <param name="param">Shader Parameter used for texture binding.</param>
            <param name="texId">An ITexture probably returned from CreateWritableTexture() method.</param>
            <param name="gHandle">The desired gBuffer texture</param>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.ClearColor">
            <summary>
            The color to use when clearing the color buffer.
            </summary>
            <value>
            The color value is interpreted as a (Red, Green, Blue, Alpha) quadruple with
            component values ranging from 0.0f to 1.0f.
            </value>
            <remarks>
            This is the color that will be copied to all pixels in the output color buffer when Clear is called on the render context.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.Clear(Fusee.Engine.Common.ClearFlags)"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.ClearDepth">
            <summary>
            The depth value to use when clearing the color buffer.
            </summary>
            <value>
            Typically set to the highest possible depth value. Typically ranges between 0 and 1.
            </value>
            <remarks>
            This is the depth (z-) value that will be copied to all pixels in the depth (z-) buffer when Clear is called on the render context.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.CurrentShader">
            <summary>
            Gets the current shader.
            </summary>
            <value>
            The current shader.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.CreateShader(System.String,System.String)">
            <summary>
            Creates a shader object from vertex shader source code and pixel shader source code.
            </summary>
            <param name="vs">A string containing the vertex shader source.</param>
            <param name="ps">A string containing the pixel (fragment) shader source code.</param>
            <returns>A shader program object identifying the combination of the given vertex and pixel shader.</returns>
            <remarks>
            Currently only shaders in GLSL (or rather GLSL/ES) source language(s) are supported.
            The result is already compiled to code executable on the GPU. <see cref="M:Fusee.Engine.Core.RenderContext.SetShader(Fusee.Engine.Core.ShaderProgram)"/>
            to activate the result as the current shader used for rendering geometry passed to the RenderContext.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.RemoveShader(Fusee.Engine.Core.ShaderEffect)">
            <summary>
            Removes given shaderprogramm from GPU
            </summary>
            <param name="ef">The ShaderEffect</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShader(Fusee.Engine.Core.ShaderProgram)">
            <summary>
            Activates the passed shader program as the current shader for geometry rendering.
            </summary>
            <param name="program">The shader to apply to mesh geometry subsequently passed to the RenderContext</param>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.CreateShader(System.String,System.String)"/>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.Render(Fusee.Serialization.Mesh)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderEffect(Fusee.Engine.Core.ShaderEffect)">
            <summary>
            Activates the passed shader effect as the current shader for geometry rendering.
            </summary>
            <param name="ef">The shader effect to compile and use.</param>
            <remarks>A ShaderEffect must be attached to a context before you can render geometry with it. The main
            task performed in this method is compiling the provided shader source code and uploading the shaders to
            the gpu.</remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)">
            <summary>
            Get a list of (uniform) shader parameters accessed by the given shader.
            </summary>
            <param name="program">The shader program to query for parameters.</param>
            <returns>
            A list of shader parameters accessed by the shader code of the given shader program. The parameters listed here
            are the so-called uniform parameters of the shader (in contrast to the varying parameters). The list contains all
            uniform parameters that are accessed by either the vertex shader, the pixel shader, or both shaders compiled into
            the given shader.
            </returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)">
            <summary>
            Returns an identifiyer for the named (uniform) parameter used in the specified shader program.
            </summary>
            <param name="program">The <see cref="T:Fusee.Engine.Core.ShaderProgram"/> using the parameter.</param>
            <param name="paramName">Name of the shader parameter.</param>
            <returns>A <see cref="T:Fusee.Engine.Common.IShaderParam"/> object to identify the given parameter in subsequent calls to SetShaderParam.</returns>
            <remarks>
            The returned handle can be used to assign values to a (uniform) shader paramter.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.GetParamValue(Fusee.Engine.Core.ShaderProgram,Fusee.Engine.Common.IShaderParam)">
            <summary>
            Gets the value of a shader parameter.
            </summary>
            <param name="program">The <see cref="T:Fusee.Engine.Core.ShaderProgram"/>.</param>
            <param name="handle">The <see cref="T:Fusee.Engine.Common.IShaderParam"/>.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,System.Single)">
            <summary>
            Sets the specified shader parameter to a float value.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float value that should be assigned to the shader parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,Fusee.Math.Core.float2)">
            <summary>
            Sets the shader parameter to a float2 value.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float2 value that should be assigned to the shader parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,Fusee.Math.Core.float3)">
            <summary>
            Sets the shader parameter to a float3 value.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float3 value that should be assigned to the shader parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,Fusee.Math.Core.float4)">
            <summary>
            Sets the shader parameter to a float4 value.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float4 value that should be assigned to the shader array parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,Fusee.Math.Core.float4[])">
            <summary>
            Sets the shader parameter to a float4 array.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float4 array that should be assigned to the shader array parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,Fusee.Math.Core.float4x4)">
            <summary>
            Sets the shader parameter to a float4x4 matrix value.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float4x4 matrix that should be assigned to the shader parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,Fusee.Math.Core.float4x4[])">
            <summary>
            Sets the shader parameter to a float4x4 matrix array.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The float4x4 matrix array that should be assigned to the shader array parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParam(Fusee.Engine.Common.IShaderParam,System.Int32)">
            <summary>
            Sets the shader parameter to a integer value.
            </summary>
            <param name="param">The <see cref="T:Fusee.Engine.Common.IShaderParam"/> identifier.</param>
            <param name="val">The integer value that should be assigned to the shader parameter.</param>
            <remarks>
            <see cref="M:Fusee.Engine.Core.RenderContext.GetShaderParam(Fusee.Engine.Core.ShaderProgram,System.String)"/> to see how to retrieve an identifier for
            a given uniform parameter name used in a shader program.
            </remarks>
            <seealso cref="M:Fusee.Engine.Core.RenderContext.GetShaderParamList(Fusee.Engine.Core.ShaderProgram)"/>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetRenderState(Fusee.Engine.Common.RenderState,System.UInt32)">
            <summary>
            Apply a single render state to the render context. All subsequent rendering will be
            performed using the currently set state unless it is changed to a different value.
            </summary>
            <param name="renderState">One of the <see cref="T:Fusee.Engine.Common.RenderState"/> enumaration values.</param>
            <param name="value">An unsigned integer value representing the value the state should be set to.
             Depending on the renderState, this value can be interpreted as an integer value, a float value, a
            boolean value, or even a color.  </param>
            <remarks>This method is close to the underlying implementation layer and might be awkward to use
            due to the ambiguity of the value parameter type. If you want type-safe state values and also 
            want to set a couple of states at the same time, try the more 
            elaborate <see cref="M:Fusee.Engine.Core.RenderContext.SetRenderState(Fusee.Engine.Core.RenderStateSet)"/> method.</remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetRenderState(Fusee.Engine.Core.RenderStateSet)">
            <summary>
            Apply a number of render states to this render context. All subsequent rendering will be
            performed using the currently set state set unless one of its values it is changed. Use this 
            method to change more than one render state at once. 
            </summary>
            <param name="renderStateSet">A set of render states with their respective values to be set.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetRenderTarget(Fusee.Engine.Core.Texture)">
            <summary>
            Sets the RenderTarget, if texture is null rendertarget is the main screen, otherwise the picture will be rendered onto given texture
            </summary>
            <param name="texture">The texture as target</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetCubeMapRenderTarget(Fusee.Engine.Core.Texture,System.Int32)">
            <summary>
            Sets the RenderTarget, if texture is null rendertarget is the main screen, otherwise the picture will be rendered onto given texture
            </summary>
            <param name="texture">The texture as target</param>
            <param name="position">The texture position within a cubemap</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.Render(Fusee.Serialization.Mesh)">
            <summary>
            Renders the specified mesh.
            </summary>
            <param name="m">The mesh that should be rendered.</param>
            <remarks>
            Passes geometry to be pushed through the rendering pipeline. <see cref="T:Fusee.Serialization.Mesh"/> for a description how geometry is made up.
            The geometry is transformed and rendered by the currently active shader program.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.SetShaderParamT(Fusee.Engine.Core.EffectParam)">
            <summary>
            Sets the shaderParam, works with every type.
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.GetPixelColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method returns the color of one or more pixels from the backbuffer.
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <returns>The requested rectangular area</returns>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.GetPixelDepth(System.Int32,System.Int32)">
            <summary>
            This method returns depth value from the depthbuffer at a given coordinate.
            </summary>
            <param name="x">X-Coordinate</param>
            <param name="y">Y-Coordinate</param>
            <returns></returns>
        </member>
        <member name="P:Fusee.Engine.Core.RenderContext.DebugLinesEnabled">
            <summary>
            Gets or sets a value indicating whether [debug lines enabled].
            </summary>
            <value>
              <c>true</c> if [debug lines enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.DebugLine(Fusee.Math.Core.float3,Fusee.Math.Core.float3,Fusee.Math.Core.float4)">
            <summary>
            Draws a Debug Line in 3D Space by using a start and end point (float3).
            </summary>
            <param name="start">The startpoint of the DebugLine.</param>
            <param name="end">The endpoint of the DebugLine.</param>
            <param name="color">The color of the DebugLine.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.Clear(Fusee.Engine.Common.ClearFlags)">
            <summary>
            Erases the contents of the speciefied rendering buffers.
            </summary>
            <param name="flags">A combination of flags specifying the rendering buffers to clear.</param>
            <remarks>
            Calling this method erases all contents of the rendering buffers. A typical use case for this method
            is to erase the contents of the color buffer and the depth buffer (z-buffer) before rendering starts
            at the beginning of a rendering loop. Thus, rendering the current frame starts with an empty color and
            z-buffer. <see cref="T:Fusee.Engine.Common.ClearFlags"/> for a list of possible buffers to clear. Make sure to use the bitwisee
            or-operator (|) to combine several buffers to clear.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.GetBufferContent(Fusee.Engine.Common.Rectangle,Fusee.Engine.Core.Texture)">
            <summary>
            Gets the content of the buffer and passes it to the <see cref="T:Fusee.Engine.Common.IRenderCanvasImp"/>.
            </summary>
            <param name="quad">The <see cref="T:Fusee.Engine.Common.Rectangle"/>.</param>
            <param name="texId">The <see cref="T:Fusee.Engine.Common.ITexture"/>.</param>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.Viewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the rectangular output region within the output buffer(s).
            </summary>
            <param name="x">leftmost pixel of the rectangular output region within the output buffer.</param>
            <param name="y">topmost pixel of the rectangular output region within the output buffer.</param>
            <param name="width">horizontal size (in pixels) of the output region.</param>
            <param name="height">vertical size (in pixels) of the ouput region.</param>
            <remarks>
            Setting the Viewport limits the rendering ouptut to the specified rectangular region.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.RenderContext.ColorMask(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable or disable Color channels to be written to the frame buffer (final image).
            Use this function as a color channel filter for the final image.
            </summary>
            <param name="red">if set to <c>true</c> [red].</param>
            <param name="green">if set to <c>true</c> [green].</param>
            <param name="blue">if set to <c>true</c> [blue].</param>
            <param name="alpha">if set to <c>true</c> [alpha].</param>
        </member>
        <member name="T:Fusee.Engine.Core.ShaderEffectParam">
            <summary>
            All compiled information of one ShaderEffect
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffectParam.CompiledShaders">
            <summary>
            The compiled vertex- and pixelshaders
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffectParam.ParamsPerPass">
            <summary>
            All parameter saved per pass with uniform handle, type and info (name, etc.) as lookup table
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffectParam.Parameters">
            <summary>
            All shader parameters of all passes
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.RenderStateSet">
            <summary>
            Use instances of this class to store a set of render states that need to be applied as a whole. 
            Instances are used in the effects system to set a couple of states before a render pass is performed.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.FillMode">
            <summary>
            A value from the <see cref="T:Fusee.Engine.FillMode"/> enumeration that represents the fill mode to apply when rendering triangles.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.CullMode">
            <summary>
            A value from the <see cref="T:Fusee.Engine.Cull"/> enumeration specifying if and how to cull the two different sides of a triangle.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.Clipping">
            <summary>
            Enables or disables primitive (triangle) clipping. Set to true to enable primitive clipping, or false to disable it.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable">
            <summary>
            Set to true to enable alpha-blended transparency, or false to disable it.
            The type of alpha blending is determined by the <see cref="P:Fusee.Engine.Core.RenderStateSet.SourceBlend"/> and <see cref="P:Fusee.Engine.Core.RenderStateSet.DestinationBlend"/> render states.
            </summary>
            <remarks>
            Blending describes the process how the pixel generated by the pixel shader is written into the render target buffer. Typically
            it is just copied at its respective pixel position, but several operations are possible to perform a calculation between the 
            pixel vlaue (rgb and a) already in the buffer and the pixel value (rgb and a) created by the pixel shader. The general blending
            assignment is  (always independent for rgb and alpha): 
            <code>
                 OUTrgb = SRCrgb * SourceBlend       {BlendOperation: [+|-|-inv|min|max]}        DSTrgb * DestinationBlend;
                 OUTa   = SRCa   * SourceBlendAlpha  {BlendOperationAlpha: [+|-|-inv|min|max]}   DSTa   * DestinationBlendAlpha;
            </code>
            where:
            <list type="bullet">
            <item><description>OUT: The new pixel written to the output buffer</description></item>
            <item><description>SRC: The pixel generated by the pixel shader</description></item>
            <item><description>DST: The pixel already in the output buffer</description></item>
            <item><description>SourceBlend: See the <see cref="P:Fusee.Engine.Core.RenderStateSet.SourceBlend"/> attribute</description></item>
            <item><description>DestinationBlend: See the <see cref="P:Fusee.Engine.Core.RenderStateSet.DestinationBlend"/> attribute</description></item>
            <item><description>SourceBlendAlpha: See the <see cref="P:Fusee.Engine.Core.RenderStateSet.SourceBlendAlpha"/> attribute</description></item>
            <item><description>DestinationBlendAlpha: See the <see cref="P:Fusee.Engine.Core.RenderStateSet.DestinationBlendAlpha"/> attribute</description></item>
            </list>
            The following example shows how to set-up the combiner to use the alpha value passed to gl_FragColor.a in the 
            pixel shader as the opacity of the resulting pixel's color. The color is blended between the pixel shader's 
            RGB output and the RGB color already in the output buffer.
            <code>
                // Switch alpha blending ON
                RC.SetRenderState(new RenderStateSet
                {
                    AlphaBlendEnable = true,
                    SourceBlend = Blend.SourceAlpha,
                    DestinationBlend = Blend.InvSourceAlpha,
                    BlendOperation = BlendOperation.Add,
                    // In case of particles:
                    ZEnable = true,
                    ZWriteEnable = false,
                });
            
                // Switch alpha blending OFF
                RC.SetRenderState(RenderState.AlphaBlendEnable, 0);
            </code>
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.BlendOperation">
            <summary>
            The blend operation to perform for blending rgb values (one of add, subtract, inverted subtract, max, or min).
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.BlendOperationAlpha">
            <summary>
            The blend operation to perform for blending alpha values (one of add, subtract, inverted subtract, max, or min).
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>  
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.SourceBlend">
            <summary>
            Contains a member of the <see cref="T:Fusee.Engine.Blend"/> enumeration that represents the source. 
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.DestinationBlend">
            <summary>
            Contains a member of the <see cref="T:Fusee.Engine.Blend"/> enumeration that represents the destination. 
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.SourceBlendAlpha">
            <summary>
            A member of the Blend enumeration that represents the source.
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.DestinationBlendAlpha">
            <summary>
            A member of the Blend enumeration that represents the destination.
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.BlendFactor">
            <summary>
            A <see cref="T:Fusee.Math.float4"/> object representing a color used for a constant blend factor during alpha blending.
            </summary>
            <seealso cref="P:Fusee.Engine.Core.RenderStateSet.AlphaBlendEnable"/>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.ZEnable">
            <summary>
            Enables or disables z-buffering (depth buffering).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.ZFunc">
            <summary>
            Determines the comparison function for the z-buffer test. Valid values are members of the <see cref="T:Fusee.Engine.Compare"/> enumeration.
            The depth value of the pixel is compared to the z-buffer value. If the depth value of the pixel passes the comparison function, the pixel is written.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.ZWriteEnable">
            <summary>
            Enables or disables depth buffer writing.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.RenderStateSet.States">
            <summary>
            Enumerate this set of render states for its contents
            </summary>
            <value>An enumerator to be used in loops returning a key and its respective value.</value>
            <example>
            Use this enumerator in loops to query a RenderStateSet's contents.
            <code>
            RenderStateSet aRenderStateSet = ...;
            foreach (var state in aRenderStateSet.States)
                DoSomethingWithState(state.Key, state.Value);
            </code>
            </example>
        </member>
        <member name="T:Fusee.Engine.Core.EffectPassDeclaration">
            <summary>
            An effect pass declaration contains the vertex and pixel shader source code as well as a <see cref="T:Fusee.Engine.Core.RenderStateSet"/>
            declaration for the rendering pass declared by this instance.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.EffectPassDeclaration.StateSet">
            <summary>
            The  <see cref="T:Fusee.Engine.Core.RenderStateSet"/> of the current effect pass.  
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.EffectPassDeclaration.VS">
            <summary>
            Vertexshader as string
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.EffectPassDeclaration.PS">
            <summary>
            Pixel- or fragmentshader as string
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.EffectParameterDeclaration">
            <summary>
            A datatype for the list of (uniform) parameters possibliy occurring in one of the shaders in the various passes.
            Each of this array entry consists of the parameter's name and its initial value. The concrete type of the object also indicates the
            parameter's type.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.EffectParameterDeclaration.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.EffectParameterDeclaration.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.ShaderEffect">
            <summary>
            A ShaderEffect contains a list of render passes with each pass item being a combination of a set of render states, and a
            pair of Pixel and Vertex Shader Programs (the code running on the GPU).
            In addition a ShaderEffect contains the actual values for all the shaders' (uniform) variables.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffect.ParamDecl">
            <summary>
            The uniform parameter and value of a <see cref="T:Fusee.Engine.Core.ShaderEffect"/>
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffect.States">
            <summary>
            List of <see cref="T:Fusee.Engine.Core.RenderStateSet"/>
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffect.VertexShaderSrc">
            <summary>
            Vertexshaders of all passes
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffect.PixelShaderSrc">
            <summary>
            Pixel- or fragmentshader of all passes
            </summary>
        </member>
        <member name="E:Fusee.Engine.Core.ShaderEffect.ShaderEffectChanged">
            <summary>
            ShaderEffect event notifies observing ShaderEffectManager about property changes and the ShaderEffects's disposal.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.ShaderEffect.SessionUniqueIdentifier">
            <summary>
            SessionUniqueIdentifier is used to verify a Mesh's uniqueness in the current session.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.#ctor(Fusee.Engine.Core.EffectPassDeclaration[],System.Collections.Generic.IEnumerable{Fusee.Engine.Core.EffectParameterDeclaration})">
            <summary>
            The constructor to create a shader effect.
            </summary>
            <param name="effectPasses">The ordered array of <see cref="T:Fusee.Engine.Core.EffectPassDeclaration"/> items. The first item
            in the array is the first pass applied to rendered geometry, and so on.</param>
            <param name="effectParameters">A list of (uniform) parameters possibliy occurring in one of the shaders in the various passes.
            Each array entry consists of the parameter's name and its initial value. The concrete type of the object also indicates the
            parameter's type.
            </param>
            <remarks>Make sure to list any parameter in any of the different passes' shaders you want to change later on in the effectParameters
            list. Shaders must not contain paramaeters with names listed in the effectParameters but declared with different types than those of 
            the respective default values given here.</remarks>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.Finalize">
            <summary>
            Destructor calls <see cref="M:Fusee.Engine.Core.ShaderEffect.Dispose"/> in order to fire MeshChanged event.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.Dispose">
            <summary>
            Is called when GC of this shadereffect kicks in
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.SetEffectParam(System.String,System.Object)">
            <summary>
            Set effect parameter
            </summary>
            <param name="name">Name of the uniform variable</param>
            <param name="value">Value of the uniform variable</param>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.GetEffectParam(System.String)">
            <summary>
            Returns the value of a given shadereffect variable
            <remarks>THIS IS NOT THE ACTUAL UNIFORM VALUE</remarks>
            </summary>
            <param name="name">Name of the uniform variable</param>
            <returns></returns>
        </member>
        <member name="P:Fusee.Engine.Core.ShaderEffect.Count">
            <summary>
            Size of <see cref="F:Fusee.Engine.Core.ShaderEffect.ParamDecl"/>
            Needed for <see cref="T:System.Dynamic.DynamicObject"/>
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Returns value of property <see cref="F:Fusee.Engine.Core.ShaderEffect.ParamDecl"/>.
            Needed for <see cref="T:System.Dynamic.DynamicObject"/>
            </summary>
            <param name="binder">Name</param>
            <param name="result">Result, in this case the value of one <see cref="F:Fusee.Engine.Core.ShaderEffect.ParamDecl"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Fusee.Engine.Core.ShaderEffect.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Set a uniform variable
            Needed for <see cref="T:System.Dynamic.DynamicObject"/>
            </summary>
            <param name="binder">Name of the uniform variable</param>
            <param name="value">Value of the uniform variable as <see cref="T:Fusee.Engine.Core.EffectParam"/>EffectParam</param>
            <returns>Element found and from type EffectParam</returns>
        </member>
        <member name="T:Fusee.Engine.Core.Texture">
            <summary>
            Texture implements <see cref="T:Fusee.Base.Common.IImageData"/> and is used inside <see cref="T:Fusee.Engine.Core.RenderContext"/> to render bitmaps in fusee.
            </summary>
        </member>
        <member name="E:Fusee.Engine.Core.Texture.TextureChanged">
            <summary>
            TextureChanged event notifies observing TextureManager about property changes and the Texture's disposal.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.Texture.SessionUniqueIdentifier">
            <summary>
            SessionUniqueIdentifier is used to verify a Textures's uniqueness in the current session.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Texture.Width">
            <summary>
            Width in pixels.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Texture.Height">
            <summary>
            Height in pixels.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Texture.PixelData">
            <summary>
            The raw Pixeldata byte buffer. This byte buffer will be uploaded to the GPU inside <see cref="T:Fusee.Engine.Core.RenderContext"/>
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Texture.PixelFormat">
            <summary>
            Provides additional information abut this Texture's pixel encoding.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Texture.IsEmpty">
            <summary>
            Checks if an image contains no data by checking if <see cref="P:Fusee.Engine.Core.Texture.Width"/> or <see cref="P:Fusee.Engine.Core.Texture.Height"/> is 0.
            </summary>
            <value>
            <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.#ctor(System.Byte[],System.Int32,System.Int32,Fusee.Base.Common.ImagePixelFormat)">
            <summary>
            Constructor initializes a Texture from a pixelData byte buffer, width and height in pixels and <see cref="T:Fusee.Base.Common.ImagePixelFormat"/>.
            </summary>
            <param name="pixelData">The raw pixelData byte buffer that makes up the texture.</param>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="colorFormat">Provides additional information about pixel encoding.</param>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.#ctor(Fusee.Base.Common.IImageData)">
            <summary>
            Initialize a Texture from an existing IImageData. The input IImageData will be copied into this Texture via <seealso cref="M:Fusee.Engine.Core.Texture.Blt(System.Int32,System.Int32,Fusee.Base.Common.IImageData,System.Int32,System.Int32,System.Int32,System.Int32)"/> command.
            </summary>
            <param name="imageData">The existing <see cref="T:Fusee.Base.Common.IImageData"/> that will be copied to initialize a Texture instance.</param>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.Blt(System.Int32,System.Int32,Fusee.Base.Common.IImageData,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies a rectangular block of pixel data from a source image to a this image (Blt = BlockTransfer).
            </summary>
            <param name="xDst">The x destination coordinate (where to place the block within dst).</param>
            <param name="yDst">The y destination coordinate (where to place the block within dst).</param>
            <param name="src">The source image.</param>
            <param name="xSrc">The x source coordinate (where to start copying from within src).</param>
            <param name="ySrc">The y source coordinate (where to start copying from within src).</param>
            <param name="width">The width of the block to copy. (default is src.Width).</param>
            <param name="height">The height of the block to copy (default is src.Height).</param>
            <remarks>
                All specified parameters are clipped to avoid out-of-bounds indices. No warnings or exceptions are issued
                in case clipping results in a smaller or an empty block.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.ScanLines(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve a rectangular block from this image that is represented by horizontal ScanLines from top to bottom along width and height, beginning at offsets xSrc and ySrc.
            </summary>
            <param name="xSrc">x offset in pixels.</param>
            <param name="ySrc">y offset in pixels.</param>
            <param name="width">width of ScanLines in pixels.</param>
            <param name="height">Height describes how many ScanLines will be returned.</param>
            <returns>Returns a rectangular block of horizontal ScanLine instances.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.Dispose">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.Finalize">
            <summary>
            Destructor calls <see cref="M:Fusee.Engine.Core.Texture.Dispose"/> in order to fire TextureChanged event.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.Texture.ClipBlt(System.Int32@,System.Int32,System.Int32@,System.Int32,System.Int32@)">
            <summary>
            Performs clipping along one dimension of a blt operation.
            </summary>
            <param name="iDst">The destination coordinate.</param>
            <param name="sizeDst">The size of the destination buffer.</param>
            <param name="iSrc">The source coordinate.</param>
            <param name="sizeSrc">The size of the source coordinate.</param>
            <param name="sizeBlk">The size of the block to copy.</param>
            <remarks>
               All parameters decorated with "ref" might be altered to avoid out-of-bounds indices.
               If the resulting number of items to copy is 0, only sizeBlk will be set to 0. No other
               ref-parameter will be altered then.
            </remarks>
        </member>
        <member name="T:Fusee.Engine.Core.TextureChangedEnum">
            <summary>
            Enum describes if a Texture has been disposed or if the texture's region changed. Used inside <see cref="T:Fusee.Engine.Core.TextureManager"/>.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.TextureChangedEnum.Disposed">
            <summary>
            The texture has been dispoed.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.TextureChangedEnum.RegionChanged">
            <summary>
            The texture's region has changed
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.TextureDataEventArgs">
            <summary>
            EventArgs to propagate changes of a <see cref="P:Fusee.Engine.Core.TextureDataEventArgs.Texture"/> object's life cycle and property changes.
            Used inside <see cref="T:Fusee.Engine.Core.TextureManager"/>.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.TextureDataEventArgs.Texture">
            <summary>
            The <see cref="P:Fusee.Engine.Core.TextureDataEventArgs.Texture"/> that triggered the event.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.TextureDataEventArgs.ChangedEnum">
            <summary>
            Description enum providing details about what property of the Texture changed.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.TextureDataEventArgs.XStart">
            <summary>
            x offset -> where does the changed region start along x (from left to right)?
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.TextureDataEventArgs.YStart">
            <summary>
            y offset -> where does the changed region start along y (from top to bottom)?
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.TextureDataEventArgs.Width">
            <summary>
            Width in pixels.
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.TextureDataEventArgs.Height">
            <summary>
            Height in pixels.
            </summary>
        </member>
        <member name="M:Fusee.Engine.Core.TextureDataEventArgs.#ctor(Fusee.Engine.Core.Texture,Fusee.Engine.Core.TextureChangedEnum,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor takes a Texture and a description which property of the Texture changed.
            </summary>
            <param name="texture">The Texture which property of life cycle has changed.</param>
            <param name="textureChangedEnum">The <see cref="T:Fusee.Engine.Core.TextureChangedEnum"/> describing which property of the Texture changed.</param>
            <param name="xStart">(optional) x offset -> where does the changed region start along x (from left to right)?</param>
            <param name="yStart">(optional) y offset -> where does the changed region start along y (from top to bottom)?</param>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
        </member>
        <member name="M:Fusee.Engine.Core.TextureManager.#ctor(Fusee.Engine.Common.IRenderContextImp)">
            <summary>
            Creates a new Instance of TextureManager. Th instance is handling the memory allocation and deallocation on the GPU by observing Texture.cs objects.
            </summary>
            <param name="renderContextImp">The RenderContextImp is used for GPU memory allocation and deallocation. See <see cref="M:Fusee.Engine.Core.TextureManager.RegisterNewTexture(Fusee.Engine.Core.Texture,System.Boolean)"/>.</param>
        </member>
        <member name="M:Fusee.Engine.Core.TextureManager.Cleanup">
            <summary>
            Call this method on the mainthread after RenderContext.Render in order to cleanup all not used Buffers from GPU memory.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.Time">
            <summary>
            The Time class provides all time information. Time is a staticton (a singleton with an additional
            static interface). 
            </summary>
            <remarks>
            Use the input instanmce in cases where you actually need an 
            object to pass around (although there is no such use case in FUSEE code at all).
            Use the static access in all other cases to reduce typing Input.Instance
            over and over again. Use <code>using static Fusee.Engine.Core.Time</code> to
            directly access <see cref="P:Fusee.Engine.Core.Time.FramePerSecond"/>, <see cref="P:Fusee.Engine.Core.Time.DeltaTime"/> etc.
            without even typing a namespace or classname.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeFramesPerSecondAverage">
            <summary>
            Provides the average framerate of the last second (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.FramesPerSecondAverage">
            <summary>
            Provides the average framerate of the last second (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeRealTimeSinceStart">
            <summary>
            Provides the passed time since start of the application uneffected by TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.RealTimeSinceStart">
            <summary>
            Provides the passed time since start of the application uneffected by TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeFramePerSecond">
            <summary>
            Provides the peek framerate, updated every frame (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.FramePerSecond">
            <summary>
            Provides the peek framerate, updated every frame (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeFrames">
            <summary>
            Provides the total number of rendered frames (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.Frames">
            <summary>
            Provides the total number of rendered frames (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeDeltaTime">
            <summary>
            Provides the DeltaTime since the last frame in milliseconds that is effected by the TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.DeltaTime">
            <summary>
            Provides the DeltaTime since the last frame in milliseconds that is effected by the TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeRealDeltaTimeMs">
            <summary>
            Provides the DeltaTime since the last frame in milliseconds that is uneffected by the TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.RealDeltaTimeMs">
            <summary>
            Provides the DeltaTime since the last frame in milliseconds that is uneffected by the TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.InstTimeSinceStart">
            <summary>
            Provides the passed time since start of the application effected by TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeSinceStart">
            <summary>
            Provides the passed time since start of the application effected by TimeScale (read only).
            </summary>
        </member>
        <member name="P:Fusee.Engine.Core.Time.InstTimeScale">
            <summary>
            The TimeScale modifies the speed of the time.
            </summary>
            <remarks>
            0 the time stops.
            1 normal time speed.
            Smaller then 1 time passes slower. 
            Bigger then 1 time passes faster.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Time.TimeScale">
            <summary>
            The TimeScale modifies the speed of the time.
            </summary>
            <remarks>
            0 the time stops.
            1 normal time speed.
            Smaller then 1 time passes slower. 
            Bigger then 1 time passes faster.
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.Time.Instance">
            <summary>
            Provides the Singleton Instance of the Time Class.
            </summary>
        </member>
        <member name="T:Fusee.Engine.Core.TwoPointAction">
            <summary>
            Symbolic value describing the double-touchpoint action with the highest intensity performed by a user with the first two touchpoints.
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.TwoPointAction.None">
            <summary>
            The user currently performs no action (no two touchpoints are active or the user
            currently does not move the two touchpoints).
            </summary>
        </member>
        <member name="F:Fusee.Engine.Core.TwoPointAction.Pinch">
            <summary>
            The user performs a pinch action, e.g. moves the two touchpoints toward each others or moves them into opposite
            directions. Use <see cref="P:Fusee.Engine.Core.TouchDevice.TwoPointDistance"/> or <see cref="P:Fusee.Engine.Core.TouchDevice.TwoPointDistanceVel"/> to retrieve
            values for derived actions based on pinch gestures.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Fusee.Engine.Core.TwoPointAction.Move" -->
        <!-- Badly formed XML comment ignored for member "F:Fusee.Engine.Core.TwoPointAction.Rotate" -->
        <member name="T:Fusee.Engine.Core.TouchDevice">
            <summary>
            Special case of an <see cref="T:Fusee.Engine.Core.InputDevice"/> identifying itself as a <see cref="F:Fusee.Engine.Common.DeviceCategory.Touch"/>.
            Defines convenience methods to access the touch buttons and axes.
            </summary>
            <remarks>
            A touch device represents input typically performed by fingers or a stylus. Touch devices support
            simultaneous presence of multiple touchpoints (performed by multiple fingers). Each touchpoint 
            is captured by four axes and one button. The button state (pressed or not pressed) signals the presence
            of the respective axis. Two positional axes for each touchpoint reveal the position in X/Y screen space 
            and two velocity axes represent the current velocity along X and Y.
            
            In Addition to tracking individual touchpoints, this device also tracks the simultaneous movements of the 
            first two active touchpoints and generates derived information, like two-point-move, pinch or rotate.
            </remarks>
        </member>
        <member name="M:Fusee.Engine.Core.TouchDevice.#ctor(Fusee.Engine.Common.IInputDeviceImp)">
            <summary>
            Initializes a new instance of the <see cref="T:Fusee.Engine.Core.TouchDevice"/> class.
            </summary>
            <param name="inpDeviceImp">The "driver".</param>
        </member>
        <member name="M:Fusee.Engine.Core.TouchDevice.GetTouchActive(Fusee.Engine.Common.TouchPoints)">
            <summary>
            Returns a value signalling if the given touchpoint is currently active (if something hits the screen).
            </summary>
            <param name="touch">The touchpoint to check.</param>
            <returns>true if this touch is acitve (a finger is on the screen), otherwise false.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.TouchDevice.GetPosition(Fusee.Engine.Common.TouchPoints)">
            <summary>
            Returns the current position of the given touchpoint. 
            The returned values are only valid if <see cref="M:Fusee.Engine.Core.TouchDevice.GetTouchActive(Fusee.Engine.Common.TouchPoints)"/> holds true for the same touchpoint.
            </summary>
            <param name="touch">The touchpoint.</param>
            <returns>The X/Y postion of the given touchpoint.</returns>
        </member>
        <member name="M:Fusee.Engine.Core.TouchDevice.GetVelocity(Fusee.Engine.Common.TouchPoints)">
            <summary>
            Retrieves the current velocity (in pixels per second) of the giben touch point. 
            The returned values are only valid if <see cref="M:Fusee.Engine.Core.TouchDevice.GetTouchActive(Fusee.Engine.Common.TouchPoints)"/> holds true for the same touchpoint.
            </summary>
            <param name="touch">The touchpoint.</param>
            <returns>The two-dimensional velocitiy of the touchpoint.</returns>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.ActiveTouchpoints">
            <summary>
            Retrieves the number of currently active touchpoints (e.g. the number of fingers currently touching the screen).
            </summary>
            <value>
            The number of active touchpoints.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPoint">
            <summary>
            Gets a value indicating whether two touchpoints are active.
            </summary>
            <value>
              <c>true</c> if currently two touchpoints are active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointGesture">
            <summary>
            Gets a value indicating the <see cref="T:Fusee.Engine.Core.TwoPointAction"/> currently performed with the highest intensity.
            </summary>
            <value>
            The double touch action currently performed by the user with the highest intensity.
            </value>
            <remarks>
            Two moving touchpoints on the screen can be interpreted in various ways. It's up to the application to interpret the two individual changes in position
            as <see cref="F:Fusee.Engine.Core.TwoPointAction.Move"/> , as a <see cref="F:Fusee.Engine.Core.TwoPointAction.Rotate"/> or as a <see cref="F:Fusee.Engine.Core.TwoPointAction.Pinch"/> . Use this method to retrieve
            a symbolic value which of these three possibilites is currently performed with the highest intensity. Applications should sensibly decide whether to 
            allow to change their behavior during a two-point-gesture (as long as <see cref="P:Fusee.Engine.Core.TouchDevice.TwoPoint"/> holds true) or to check this value only initially whenever
            a two-point gesture starts, or do something in-between. As a practice: Investigate how the 
            <a href="https://play.google.com/store/apps/details?id=com.google.earth">Google Earth mobile app</a> handles this question!
            </remarks>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointDistance">
            <summary>
            Gets the distance between the first two touchpoints. Use this value if you want to implement pinch-like actions based on the current absolute distance.
            </summary>
            <value>
            The distance between the first two active touchpoints, or zero, if no two touchpoints are active.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointDistanceVel">
            <summary>
            Gets velocity of the distance between the first two touchpoints. Use this value if you want to implement pinch-like actions based on the current speed of the distance.
            </summary>
            <value>
            The distance velocity. Positive values mean fingers move away from each others (Zoom-In), negative values mean fingers approach each others (Zoom-Out).
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointAngle">
            <summary>
            Gets the angle of a line between the first two active touchpoints measured from the positive screen x-axis. Use this value if you want to implement rotation-like actions 
            based on the current absolute angle.
            </summary>
            <value>
            The angle value in radians. Ranges between -PI and PI. An angle of zero denotes the positive x-axis.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointAngleVel">
            <summary>
            Gets the angular velocity of a line between the first two active touchpoints measured from the positive screen x-axis. Use this value if you want to implement rotation-like actions 
            based on the current rotation speed of the first two touchpoints.
            </summary>
            <value>
            The angular velocity of the rotation movement of the first two touchpoints. Positive values mean counter-clockwise rotation, negative values mean clockwise rotation.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointMidPoint">
            <summary>
            Gets midpoint between the first two active touch points. Use this value if you want to implement two-finger movement-like actions based on the current averaged
            absolute position of the first two touchpoints
            </summary>
            <value>
            The midpoint (halfway between) touchpoint 0 and touchpoint 1.
            </value>
        </member>
        <member name="P:Fusee.Engine.Core.TouchDevice.TwoPointMidPointVel">
            <summary>
            Gets speed of the midpoint between the first two active touch points. Use this value if you want to implement two-finger movement-like actions based on the current 
            averaged speed of the first two touchpoints.
            </summary>
            <value>
            The two-dimenstional speed vector of the midpoint between touchpoint 0 and touchpoint 1.
            </value>
        </member>
        <member name="T:Fusee.Engine.Common.ResizeEventArgs">
            <summary>
            Argument Container for Resize event of <see cref="T:Fusee.Engine.Common.IRenderCanvasImp"/>.
            </summary>
        </member>
    </members>
</doc>
